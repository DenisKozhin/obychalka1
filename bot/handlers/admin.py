import sys
import os
from datetime import datetime

if __name__ == "__main__":
    sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))))

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func

from bot.database.models import Category, Article, ArticleImage, User, Test, AdminLog
from bot.keyboards.admin_kb import get_admin_menu_kb
from bot.utils.logger import logger
from bot.database.operations_library import (
    get_categories, get_category_by_id, create_category, update_category, delete_category,
    get_articles_by_category, get_article_by_id, create_article, update_article, delete_article,
    get_article_images, add_article_image, delete_article_image
)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–Ω–∞–Ω–∏–π
router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class LibraryAdminStates(StatesGroup):
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    waiting_for_category_name = State()
    waiting_for_subcategory_name = State()
    waiting_for_edit_category_name = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç—å—è–º–∏
    waiting_for_article_title = State()
    waiting_for_article_content = State()
    waiting_for_article_images = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
    waiting_for_edit_article_title = State()
    waiting_for_edit_article_content = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    waiting_for_select_city = State()
    waiting_for_select_store = State()
    waiting_for_select_user = State()
    waiting_for_confirm_send = State()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–Ω–∞–Ω–∏–π
async def get_admin_categories_kb(session: AsyncSession, parent_id=None, level=1):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = await get_categories(session, parent_id=parent_id, level=level)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category in categories:
        builder.add(InlineKeyboardButton(
            text=category.name,
            callback_data=f"admin_category_{category.category_id}_{level}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if parent_id is None and level == 1:
        builder.add(InlineKeyboardButton(
            text="‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é",
            callback_data="add_main_category"
        ))
    else:
        builder.add(InlineKeyboardButton(
            text="‚ûï –î–æ–¥–∞—Ç–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é",
            callback_data=f"add_subcategory_{parent_id}_{level}"
        ))
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if level > 1 or parent_id is not None:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if parent_id is not None:
            parent = await get_category_by_id(session, parent_id)
            back_parent_id = parent.parent_id if parent else None
            back_level = level - 1
        else:
            back_parent_id = None
            back_level = level - 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        builder.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=f"admin_back_to_categories_{back_level}_{back_parent_id or 0}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é",
        callback_data="back_to_admin_menu"
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
async def get_category_actions_kb(session: AsyncSession, category_id: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category = await get_category_by_id(session, category_id)
    
    if not category:
        return None
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
    builder.add(InlineKeyboardButton(
        text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É",
        callback_data=f"edit_category_{category_id}"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å < 3
    if category.level < 3:
        builder.add(InlineKeyboardButton(
            text="‚ûï –î–æ–¥–∞—Ç–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é",
            callback_data=f"add_subcategory_{category_id}_{category.level}"
        ))
    
    # –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å = 3 (–≥—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤), –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å—Ç–∞—Ç–µ–π
    if category.level == 3:
        builder.add(InlineKeyboardButton(
            text="üìÑ –°—Ç–∞—Ç—Ç—ñ –≤ –≥—Ä—É–ø—ñ",
            callback_data=f"admin_articles_in_category_{category_id}"
        ))
        
        builder.add(InlineKeyboardButton(
            text="‚ûï –î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é",
            callback_data=f"add_article_{category_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    builder.add(InlineKeyboardButton(
        text="üóë –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é",
        callback_data=f"delete_category_{category_id}"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if category.parent_id:
        builder.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π",
            callback_data=f"admin_back_to_categories_{category.level}_{category.parent_id}"
        ))
    else:
        builder.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π",
            callback_data="admin_back_to_categories_1_0"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é",
        callback_data="back_to_admin_menu"
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π
async def get_admin_articles_kb(session: AsyncSession, category_id: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    articles = await get_articles_by_category(session, category_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç–∞—Ç—å–∏
    for article in articles:
        builder.add(InlineKeyboardButton(
            text=article.title,
            callback_data=f"admin_article_{article.article_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç–∞—Ç—å–∏
    builder.add(InlineKeyboardButton(
        text="‚ûï –î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é",
        callback_data=f"add_article_{category_id}"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó",
        callback_data=f"admin_category_{category_id}_3"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é",
        callback_data="back_to_admin_menu"
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å—Ç–∞—Ç—å–µ–π
async def get_article_actions_kb(session: AsyncSession, article_id: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
    article = await get_article_by_id(session, article_id)
    
    if not article:
        return None
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    builder.add(InlineKeyboardButton(
        text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫",
        callback_data=f"edit_article_title_{article_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–º—ñ—Å—Ç",
        callback_data=f"edit_article_content_{article_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üñº –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏",
        callback_data=f"manage_article_images_{article_id}"
    ))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞—Ç—å–∏
    test_result = await session.execute(
        select(Test).where(Test.article_id == article_id)
    )
    test = test_result.scalar_one_or_none()
    
    if test:
        builder.add(InlineKeyboardButton(
            text="üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ—Å—Ç",
            callback_data=f"edit_test_{test.test_id}"
        ))
    else:
        builder.add(InlineKeyboardButton(
            text="‚ûï –î–æ–¥–∞—Ç–∏ —Ç–µ—Å—Ç",
            callback_data=f"add_test_{article_id}"
        ))
    
    builder.add(InlineKeyboardButton(
        text="üì§ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º",
        callback_data=f"send_article_{article_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üóë –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ç—Ç—é",
        callback_data=f"delete_article_{article_id}"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Å—Ç–∞—Ç–µ–π
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É —Å—Ç–∞—Ç–µ–π",
        callback_data=f"admin_articles_in_category_{article.category_id}"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é",
        callback_data="back_to_admin_menu"
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
async def get_manage_images_kb(session: AsyncSession, article_id: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
    article = await get_article_by_id(session, article_id)
    
    if not article:
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏
    images = await get_article_images(session, article_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    for i, image in enumerate(images):
        builder.add(InlineKeyboardButton(
            text=f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è {i+1} üóë",
            callback_data=f"delete_image_{image.image_id}"
        ))
    
    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º–µ–Ω—å—à–µ 5, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if len(images) < 5:
        builder.add(InlineKeyboardButton(
            text="‚ûï –î–æ–¥–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è",
            callback_data=f"add_image_{article_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç–∞—Ç—å–µ
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –¥–æ —Å—Ç–∞—Ç—Ç—ñ",
        callback_data=f"admin_article_{article_id}"
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
async def get_confirm_delete_kb(entity_type: str, entity_id: int, return_callback: str):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏",
        callback_data=f"confirm_delete_{entity_type}_{entity_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="‚ùå –ù—ñ, —Å–∫–∞—Å—É–≤–∞—Ç–∏",
        callback_data=return_callback
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–°—Ç–∞—Ç—å–∏" –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
@router.callback_query(F.data == "admin_articles")
async def admin_articles_command(callback: CallbackQuery, session: AsyncSession):
    try:
        await callback.message.edit_text(
            "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–æ—é –∑–Ω–∞–Ω—å. –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
            reply_markup=await get_admin_categories_kb(session)
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log = AdminLog(
            admin_id=callback.from_user.id,
            action_type="VIEW",
            entity_type="LIBRARY",
            details={"action": "view_library_categories"}
        )
        session.add(log)
        await session.commit()
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_articles_command: {e}")
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
@router.callback_query(F.data.startswith("admin_back_to_categories_"))
async def admin_back_to_categories(callback: CallbackQuery, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
        parts = callback.data.split("_")
        level = int(parts[4])
        parent_id = int(parts[5]) if parts[5] != "0" else None
        
        if level == 1 and parent_id is None:
            # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–æ—Ä–Ω–µ–≤—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            await callback.message.edit_text(
                "–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–æ—é –∑–Ω–∞–Ω—å. –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
                reply_markup=await get_admin_categories_kb(session)
            )
        else:
            # –ï—Å–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            parent = await get_category_by_id(session, parent_id)
            await callback.message.edit_text(
                f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {parent.name if parent else '–û—Å–Ω–æ–≤–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó'}\n\n–í–∏–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
                reply_markup=await get_admin_categories_kb(session, parent_id, level)
            )
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_back_to_categories: {e}")
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@router.callback_query(F.data.startswith("admin_category_"))
async def admin_category_selection(callback: CallbackQuery, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑ callback_data
        parts = callback.data.split("_")
        category_id = int(parts[2])
        level = int(parts[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = await get_category_by_id(session, category_id)
        
        if not category:
            await callback.message.edit_text(
                "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                reply_markup=await get_admin_categories_kb(session)
            )
            await callback.answer()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category.level < 3:
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è 1 –∏–ª–∏ 2 —É—Ä–æ–≤–Ω—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            subcategories = await get_categories(session, parent_id=category_id)
            
            if not subcategories:
                await callback.message.edit_text(
                    f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category.name} (—Ä—ñ–≤–µ–Ω—å {category.level})\n\n"
                    f"–£ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ–º–∞—î –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π.",
                    reply_markup=await get_category_actions_kb(session, category_id)
                )
            else:
                await callback.message.edit_text(
                    f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category.name} (—Ä—ñ–≤–µ–Ω—å {category.level})\n\n"
                    f"–í–∏–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–±–æ –¥—ñ—é –∑ –ø–æ—Ç–æ—á–Ω–æ—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é:",
                    reply_markup=await get_admin_categories_kb(session, category_id, category.level + 1)
                )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è 3 —É—Ä–æ–≤–Ω—è (–≥—Ä—É–ø–ø–∞ —Ç–æ–≤–∞—Ä–æ–≤), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
            await callback.message.edit_text(
                f"–ì—Ä—É–ø–∞ —Ç–æ–≤–∞—Ä—ñ–≤: {category.name}\n\n"
                f"–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=await get_category_actions_kb(session, category_id)
            )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log = AdminLog(
            admin_id=callback.from_user.id,
            action_type="VIEW",
            entity_type="CATEGORY",
            entity_id=category_id,
            details={"category_name": category.name, "level": category.level}
        )
        session.add(log)
        await session.commit()
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_category_selection: {e}")
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data == "add_main_category")
async def add_main_category(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_text(
            "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (—Ä—ñ–≤–µ–Ω—å 1):"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await state.set_state(LibraryAdminStates.waiting_for_category_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await state.update_data(level=1, parent_id=None)
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_main_category: {e}")
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("add_subcategory_"))
async def add_subcategory(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑ callback_data
        parts = callback.data.split("_")
        parent_id = int(parts[1])
        parent_level = int(parts[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        parent = await get_category_by_id(session, parent_id)
        
        if not parent:
            await callback.message.edit_text(
                "–ë–∞—Ç—å–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                reply_markup=await get_admin_categories_kb(session)
            )
            await callback.answer()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫ —É—Ä–æ–≤–Ω—é 3)
        if parent.level >= 3:
            await callback.message.edit_text(
                "–ù–µ–º–æ–∂–ª–∏–≤–æ –¥–æ–¥–∞—Ç–∏ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é –¥–æ –≥—Ä—É–ø–∏ —Ç–æ–≤–∞—Ä—ñ–≤ (—Ä—ñ–≤–µ–Ω—å 3).",
                reply_markup=await get_category_actions_kb(session, parent_id)
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            f"–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó \"{parent.name}\" (—Ä—ñ–≤–µ–Ω—å {parent.level + 1}):"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await state.set_state(LibraryAdminStates.waiting_for_subcategory_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await state.update_data(parent_id=parent_id, level=parent.level + 1)
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_subcategory: {e}")
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(LibraryAdminStates.waiting_for_category_name)
async def process_category_name(message: Message, state: FSMContext, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        category_name = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if len(category_name) < 3:
            await message.answer(
                "–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 3 —Å–∏–º–≤–æ–ª—ñ–≤. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É:"
            )
            return
        
        if len(category_name) > 100:
            await message.answer(
                "–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 100 —Å–∏–º–≤–æ–ª—ñ–≤. –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç—à—É –Ω–∞–∑–≤—É:"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        level = data.get("level", 1)
        parent_id = data.get("parent_id")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        category = await create_category(session, category_name, parent_id, level)
        
        if not category:
            await message.answer(
                f"–ü–æ–º–∏–ª–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∑ –Ω–∞–∑–≤–æ—é '{category_name}' –≤–∂–µ —ñ—Å–Ω—É—î. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É:"
            )
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log = AdminLog(
            admin_id=message.from_user.id,
            action_type="ADD",
            entity_type="CATEGORY",
            entity_id=category.category_id,
            details={"category_name": category_name, "level": level, "parent_id": parent_id}
        )
        session.add(log)
        await session.commit()
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if parent_id is None:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            await message.answer(
                f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è '{category_name}' —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!",
                reply_markup=await get_admin_categories_kb(session)
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
            parent = await get_category_by_id(session, parent_id)
            await message.answer(
                f"–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è '{category_name}' —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{parent.name if parent else ''}'!",
                reply_markup=await get_admin_categories_kb(session, parent_id, level)
            )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_category_name: {e}")
        await message.answer(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(LibraryAdminStates.waiting_for_subcategory_name)
async def process_subcategory_name(message: Message, state: FSMContext, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        subcategory_name = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if len(subcategory_name) < 3:
            await message.answer(
                "–ù–∞–∑–≤–∞ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 3 —Å–∏–º–≤–æ–ª—ñ–≤. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É:"
            )
            return
        
        if len(subcategory_name) > 100:
            await message.answer(
                "–ù–∞–∑–≤–∞ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 100 —Å–∏–º–≤–æ–ª—ñ–≤. –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç—à—É –Ω–∞–∑–≤—É:"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        parent_id = data.get("parent_id")
        level = data.get("level", 2)
        
        if not parent_id:
            await message.answer(
                "–ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        parent = await get_category_by_id(session, parent_id)
        
        if not parent:
            await message.answer(
                "–ü–æ–º–∏–ª–∫–∞: –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
        subcategory = await create_category(session, subcategory_name, parent_id, level)
        
        if not subcategory:
            await message.answer(
                f"–ü–æ–º–∏–ª–∫–∞: –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∑ –Ω–∞–∑–≤–æ—é '{subcategory_name}' –≤–∂–µ —ñ—Å–Ω—É—î. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É:"
            )
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log = AdminLog(
            admin_id=message.from_user.id,
            action_type="ADD",
            entity_type="CATEGORY",
            entity_id=subcategory.category_id,
            details={"category_name": subcategory_name, "level": level, "parent_id": parent_id, "parent_name": parent.name}
        )
        session.add(log)
        await session.commit()
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await message.answer(
            f"–ü—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—è '{subcategory_name}' —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{parent.name}'!",
            reply_markup=await get_admin_categories_kb(session, parent_id, parent.level + 1)
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_subcategory_name: {e}")
        await message.answer(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("edit_category_"))
async def edit_category(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
        category_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = await get_category_by_id(session, category_id)
        
        if not category:
            await callback.message.edit_text(
                "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                reply_markup=await get_admin_categories_kb(session)
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            f"–ü–æ—Ç–æ—á–Ω–∞ –Ω–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: \"{category.name}\"\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await state.set_state(LibraryAdminStates.waiting_for_edit_category_name)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(category_id=category_id)
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_category: {e}")
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.message(LibraryAdminStates.waiting_for_edit_category_name)
async def process_edit_category_name(message: Message, state: FSMContext, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        new_name = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
        if len(new_name) < 3:
            await message.answer(
                "–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 3 —Å–∏–º–≤–æ–ª—ñ–≤. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É:"
            )
            return
        
        if len(new_name) > 100:
            await message.answer(
                "–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 100 —Å–∏–º–≤–æ–ª—ñ–≤. –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç—à—É –Ω–∞–∑–≤—É:"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        category_id = data.get("category_id")
        
        if not category_id:
            await message.answer(
                "–ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = await get_category_by_id(session, category_id)
        
        if not category:
            await message.answer(
                "–ü–æ–º–∏–ª–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        old_name = category.name
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        success = await update_category(session, category_id, new_name)
        
        if not success:
            await message.answer(
                f"–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –ú–æ–∂–ª–∏–≤–æ, –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –∑ –Ω–∞–∑–≤–æ—é '{new_name}' –≤–∂–µ —ñ—Å–Ω—É—î. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É:"
            )
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log = AdminLog(
            admin_id=message.from_user.id,
            action_type="EDIT",
            entity_type="CATEGORY",
            entity_id=category_id,
            details={"old_name": old_name, "new_name": new_name, "level": category.level}
        )
        session.add(log)
        await session.commit()
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await message.answer(
            f"–ù–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–º—ñ–Ω–µ–Ω–∞ –∑ \"{old_name}\" –Ω–∞ \"{new_name}\"!"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if category.parent_id is None:
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            await message.answer(
                "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
                reply_markup=await get_admin_categories_kb(session)
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
            await message.answer(
                "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é:",
                reply_markup=await get_category_actions_kb(session, category_id)
            )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_edit_category_name: {e}")
        await message.answer(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –Ω–∞–∑–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("delete_category_"))
async def delete_category_command(callback: CallbackQuery, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
        category_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = await get_category_by_id(session, category_id)
        
        if not category:
            await callback.message.edit_text(
                "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                reply_markup=await get_admin_categories_kb(session)
            )
            await callback.answer()
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        if category.parent_id:
            return_callback = f"admin_category_{category.parent_id}_{category.level-1}"
        else:
            return_callback = "admin_back_to_categories_1_0"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategories = await get_categories(session, parent_id=category_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç–∞—Ç—å–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Ä–æ–≤–Ω—è 3)
        articles_count = 0
        if category.level == 3:
            articles_result = await session.execute(
                select(func.count(Article.article_id))
                .where(Article.category_id == category_id)
            )
            articles_count = articles_result.scalar_one()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
        message_text = f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é \"{category.name}\"?"
        
        if subcategories:
            message_text += f"\n\n–£–≤–∞–≥–∞! –ë—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ —Ç–∞–∫–æ–∂ {len(subcategories)} –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ–π!"
        
        if articles_count > 0:
            message_text += f"\n\n–£–≤–∞–≥–∞! –ë—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ —Ç–∞–∫–æ–∂ {articles_count} —Å—Ç–∞—Ç–µ–π!"
        
        await callback.message.edit_text(
            message_text,
            reply_markup=await get_confirm_delete_kb("category", category_id, return_callback)
        )
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_category_command: {e}")
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("confirm_delete_category_"))
async def confirm_delete_category(callback: CallbackQuery, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
        category_id = int(callback.data.split("_")[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = await get_category_by_id(session, category_id)
        
        if not category:
            await callback.message.edit_text(
                "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                reply_markup=await get_admin_categories_kb(session)
            )
            await callback.answer()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        category_data = {
            "id": category.category_id,
            "name": category.name,
            "level": category.level,
            "parent_id": category.parent_id
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—É–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        parent_id = category.parent_id
        parent_level = category.level - 1 if category.level > 1 else 1
        
        # –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –µ—ë –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        success = await delete_category(session, category_id)
        
        if not success:
            await callback.message.edit_text(
                f"–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é \"{category.name}\".",
                reply_markup=await get_category_actions_kb(session, category_id)
            )
            await callback.answer()
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log = AdminLog(
            admin_id=callback.from_user.id,
            action_type="DELETE",
            entity_type="CATEGORY",
            entity_id=category_id,
            details=category_data
        )
        session.add(log)
        await session.commit()
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await callback.message.edit_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è \"{category.name}\" —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞!"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if parent_id is None:
            # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –∫–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            await callback.message.answer(
                "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
                reply_markup=await get_admin_categories_kb(session)
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
            parent = await get_category_by_id(session, parent_id)
            if parent:
                await callback.message.answer(
                    f"–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó \"{parent.name}\":",
                    reply_markup=await get_admin_categories_kb(session, parent_id, parent_level)
                )
            else:
                await callback.message.answer(
                    "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
                    reply_markup=await get_admin_categories_kb(session)
                )
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_delete_category: {e}")
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("admin_articles_in_category_"))
async def admin_articles_in_category(callback: CallbackQuery, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
        category_id = int(callback.data.split("_")[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = await get_category_by_id(session, category_id)
        
        if not category:
            await callback.message.edit_text(
                "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                reply_markup=await get_admin_categories_kb(session)
            )
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        articles = await get_articles_by_category(session, category_id)
        
        if not articles:
            await callback.message.edit_text(
                f"–£ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó \"{category.name}\" –Ω–µ–º–∞—î —Å—Ç–∞—Ç–µ–π.\n\n"
                f"–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É —Å—Ç–∞—Ç—Ç—é.",
                reply_markup=await get_admin_articles_kb(session, category_id)
            )
        else:
            await callback.message.edit_text(
                f"–°—Ç–∞—Ç—Ç—ñ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó \"{category.name}\":",
                reply_markup=await get_admin_articles_kb(session, category_id)
            )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log = AdminLog(
            admin_id=callback.from_user.id,
            action_type="VIEW",
            entity_type="ARTICLES",
            details={"category_id": category_id, "category_name": category.name}
        )
        session.add(log)
        await session.commit()
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_articles_in_category: {e}")
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–∞—Ç–µ–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏
@router.callback_query(F.data.startswith("add_article_"))
async def add_article(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
        category_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = await get_category_by_id(session, category_id)
        
        if not category:
            await callback.message.edit_text(
                "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                reply_markup=await get_admin_categories_kb(session)
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            f"–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Å—Ç–∞—Ç—Ç—ñ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó \"{category.name}\".\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—Ç—ñ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª—ñ–≤):"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–∞—Ç—å–∏
        await state.set_state(LibraryAdminStates.waiting_for_article_title)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(category_id=category_id)
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_article: {e}")
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–∞—Ç—å–∏
@router.message(LibraryAdminStates.waiting_for_article_title)
async def process_article_title(message: Message, state: FSMContext, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        title = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if len(title) < 3:
            await message.answer(
                "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—Ç—ñ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 3 —Å–∏–º–≤–æ–ª—ñ–≤. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:"
            )
            return
        
        if len(title) > 200:
            await message.answer(
                "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—Ç—ñ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 200 —Å–∏–º–≤–æ–ª—ñ–≤. –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç—à–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(article_title=title)
        
        await message.answer(
            "–¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—Ç—ñ (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª—ñ–≤):\n\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è:\n"
            "**–∂–∏—Ä–Ω–∏–π —Ç–µ–∫—Å—Ç** - –≤–∏–¥—ñ–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∂–∏—Ä–Ω–∏–º\n"
            "*–∫—É—Ä—Å–∏–≤* - –≤–∏–¥—ñ–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∫—É—Ä—Å–∏–≤–æ–º\n"
            "- —Å–ø–∏—Å–æ–∫ - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É\n"
            "1. –Ω—É–º–µ—Ä–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω—É–º–µ—Ä–æ–≤–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏
        await state.set_state(LibraryAdminStates.waiting_for_article_content)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_article_title: {e}")
        await message.answer(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏
@router.message(LibraryAdminStates.waiting_for_article_content)
async def process_article_content(message: Message, state: FSMContext, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        content = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
        if len(content) < 10:
            await message.answer(
                "–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—Ç—ñ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 10 —Å–∏–º–≤–æ–ª—ñ–≤. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π —Ç–µ–∫—Å—Ç:"
            )
            return
        
        if len(content) > 4000:
            await message.answer(
                "–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—Ç—ñ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 4000 —Å–∏–º–≤–æ–ª—ñ–≤. –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç—à–∏–π —Ç–µ–∫—Å—Ç:"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        category_id = data.get("category_id")
        title = data.get("article_title")
        
        if not category_id or not title:
            await message.answer(
                "–ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞–±–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é
        article = await create_article(session, title, content, category_id, message.from_user.id)
        
        if not article:
            await message.answer(
                "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—Ç—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
            await state.clear()
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log = AdminLog(
            admin_id=message.from_user.id,
            action_type="ADD",
            entity_type="ARTICLE",
            entity_id=article.article_id,
            details={"title": title, "category_id": category_id}
        )
        session.add(log)
        await session.commit()
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await message.answer(
            f"–°—Ç–∞—Ç—Ç—è \"{title}\" —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!\n\n"
            f"–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ —Å—Ç–∞—Ç—Ç—ñ (–º–∞–∫—Å–∏–º—É–º 5 –∑–æ–±—Ä–∞–∂–µ–Ω—å).\n"
            f"–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ü–µ–π –∫—Ä–æ–∫:",
            reply_markup=await get_image_skip_kb(article.article_id)
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        await state.set_state(LibraryAdminStates.waiting_for_article_images)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å—Ç–∞—Ç—å–∏ –∏ —Å—á–µ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(article_id=article.article_id, image_count=0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_article_content: {e}")
        await message.answer(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await state.clear()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
async def get_image_skip_kb(article_id: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å",
        callback_data=f"skip_images_{article_id}"
    ))
    
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç—å–∏
@router.message(LibraryAdminStates.waiting_for_article_images, F.photo)
async def process_article_image(message: Message, state: FSMContext, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        article_id = data.get("article_id")
        image_count = data.get("image_count", 0)
        
        if not article_id:
            await message.answer(
                "–ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if image_count >= 5:
            await message.answer(
                "–í–∏ –≤–∂–µ –¥–æ–¥–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å (5)."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        file_id = photo.file_id
        file_unique_id = photo.file_unique_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —Å—Ç–∞—Ç—å–µ
        image = await add_article_image(session, article_id, file_id, file_unique_id, image_count)
        
        if not image:
            await message.answer(
                "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –ú–æ–∂–ª–∏–≤–æ, –¥–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ (5)."
            )
            return
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_count += 1
        await state.update_data(image_count=image_count)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log = AdminLog(
            admin_id=message.from_user.id,
            action_type="ADD",
            entity_type="IMAGE",
            entity_id=image.image_id,
            details={"article_id": article_id, "position": image_count - 1}
        )
        session.add(log)
        await session.commit()
        
        if image_count < 5:
            # –ï—Å–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            await message.answer(
                f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è {image_count}/5 –¥–æ–¥–∞–Ω–æ!\n\n"
                f"–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —â–µ –æ–¥–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏:",
                reply_markup=await get_image_skip_kb(article_id)
            )
        else:
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            await message.answer(
                "–î–æ–¥–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å (5).\n\n"
                "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π
            article = await get_article_by_id(session, article_id)
            
            if article:
                await message.answer(
                    f"–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É —Å—Ç–∞—Ç–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:",
                    reply_markup=await get_admin_articles_kb(session, article.category_id)
                )
            else:
                await message.answer(
                    "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
                    reply_markup=get_admin_menu_kb()
                )
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_article_image: {e}")
        await message.answer(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@router.callback_query(F.data.startswith("skip_images_"))
async def skip_images(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ç–∞—Ç—å–∏ –∏–∑ callback_data
        article_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
        article = await get_article_by_id(session, article_id)
        
        if not article:
            await callback.message.edit_text(
                "–°—Ç–∞—Ç—Ç—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                reply_markup=get_admin_menu_kb()
            )
            await callback.answer()
            await state.clear()
            return
        
        await callback.message.edit_text(
            "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –±–µ–∑ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å."
        )
        
        await callback.message.answer(
            f"–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É —Å—Ç–∞—Ç–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:",
            reply_markup=await get_admin_articles_kb(session, article.category_id)
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ skip_images: {e}")
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await callback.answer()
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@router.callback_query(F.data.startswith("admin_article_"))
async def admin_article_view(callback: CallbackQuery, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ç–∞—Ç—å–∏ –∏–∑ callback_data
        article_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
        article = await get_article_by_id(session, article_id)
        
        if not article:
            await callback.message.edit_text(
                "–°—Ç–∞—Ç—Ç—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                reply_markup=await get_admin_categories_kb(session)
            )
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = await get_category_by_id(session, article.category_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ
        author_result = await session.execute(
            select(User).where(User.user_id == article.created_by)
        )
        author = author_result.scalar_one_or_none()
        author_name = f"{author.first_name} {author.last_name}" if author else "–ù–µ–≤—ñ–¥–æ–º–∏–π"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—å–µ
        article_text = f"<b>{article.title}</b>\n\n{article.content}\n\n"
        article_text += f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category.name if category else '–ù–µ–≤—ñ–¥–æ–º–∞'}\n"
        article_text += f"–ê–≤—Ç–æ—Ä: {author_name}\n"
        article_text += f"–°—Ç–≤–æ—Ä–µ–Ω–æ: {article.created_at.strftime('%d.%m.%Y %H:%M')}\n"
        article_text += f"–û–Ω–æ–≤–ª–µ–Ω–æ: {article.updated_at.strftime('%d.%m.%Y %H:%M')}\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏
        images = await get_article_images(session, article_id)
        article_text += f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {len(images)}/5\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–∞—Ö —Å—Ç–∞—Ç—å–∏
        tests_result = await session.execute(
            select(Test).where(Test.article_id == article_id)
        )
        tests = tests_result.scalars().all()
        article_text += f"–¢–µ—Å—Ç–∏: {len(tests)}\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
        await callback.message.edit_text(
            article_text,
            parse_mode="HTML"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        for image in images:
            await callback.message.answer_photo(
                photo=image.file_id,
                caption=f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è {image.position + 1}/{len(images)}"
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ —Å–æ —Å—Ç–∞—Ç—å–µ–π
        await callback.message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑—ñ —Å—Ç–∞—Ç—Ç–µ—é:",
            reply_markup=await get_article_actions_kb(session, article_id)
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log = AdminLog(
            admin_id=callback.from_user.id,
            action_type="VIEW",
            entity_type="ARTICLE",
            entity_id=article_id,
            details={"title": article.title, "category_id": article.category_id}
        )
        session.add(log)
        await session.commit()
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_article_view: {e}")
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–∞—Ç—å–∏
@router.callback_query(F.data.startswith("edit_article_title_"))
async def edit_article_title(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ç–∞—Ç—å–∏ –∏–∑ callback_data
        article_id = int(callback.data.split("_")[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
        article = await get_article_by_id(session, article_id)
        
        if not article:
            await callback.message.edit_text(
                "–°—Ç–∞—Ç—Ç—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                reply_markup=get_admin_menu_kb()
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            f"–ü–æ—Ç–æ—á–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—Ç—ñ: \"{article.title}\"\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Å—Ç–∞—Ç—Ç—ñ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª—ñ–≤):"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        await state.set_state(LibraryAdminStates.waiting_for_edit_article_title)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å—Ç–∞—Ç—å–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(article_id=article_id)
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_article_title: {e}")
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–∞—Ç—å–∏
@router.message(LibraryAdminStates.waiting_for_edit_article_title)
async def process_edit_article_title(message: Message, state: FSMContext, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        new_title = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if len(new_title) < 3:
            await message.answer(
                "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—Ç—ñ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 3 —Å–∏–º–≤–æ–ª—ñ–≤. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:"
            )
            return
        
        if len(new_title) > 200:
            await message.answer(
                "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—Ç—ñ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 200 —Å–∏–º–≤–æ–ª—ñ–≤. –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç—à–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        article_id = data.get("article_id")
        
        if not article_id:
            await message.answer(
                "–ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
        article = await get_article_by_id(session, article_id)
        
        if not article:
            await message.answer(
                "–ü–æ–º–∏–ª–∫–∞: —Å—Ç–∞—Ç—Ç—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        old_title = article.title
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏
        success = await update_article(session, article_id, title=new_title)
        
        if not success:
            await message.answer(
                "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log = AdminLog(
            admin_id=message.from_user.id,
            action_type="EDIT",
            entity_type="ARTICLE",
            entity_id=article_id,
            details={"field": "title", "old_value": old_title, "new_value": new_title}
        )
        session.add(log)
        await session.commit()
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        await message.answer(
            f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—Ç—ñ –∑–º—ñ–Ω–µ–Ω–æ –∑ \"{old_title}\" –Ω–∞ \"{new_title}\"!"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
        article = await get_article_by_id(session, article_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ —Å–æ —Å—Ç–∞—Ç—å–µ–π
        await message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑—ñ —Å—Ç–∞—Ç—Ç–µ—é:",
            reply_markup=await get_article_actions_kb(session, article_id)
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_edit_article_title: {e}")
        await message.answer(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–∞—Ç—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await state.clear()

# –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–Ω–∞–Ω–∏–π

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç–∞—Ç—å–∏
@router.callback_query(F.data.startswith("edit_article_content_"))
async def edit_article_content(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ç–∞—Ç—å–∏ –∏–∑ callback_data
        article_id = int(callback.data.split("_")[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
        article = await get_article_by_id(session, article_id)
        
        if not article:
            await callback.message.edit_text(
                "–°—Ç–∞—Ç—Ç—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                reply_markup=get_admin_menu_kb()
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            f"–ü–æ—Ç–æ—á–Ω–∏–π –∑–º—ñ—Å—Ç —Å—Ç–∞—Ç—Ç—ñ:\n\n{article.content}\n\n"
            f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –∑–º—ñ—Å—Ç –¥–ª—è —Å—Ç–∞—Ç—Ç—ñ (–º–∞–∫—Å–∏–º—É–º 4000 —Å–∏–º–≤–æ–ª—ñ–≤).\n"
            f"–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è."
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        await state.set_state(LibraryAdminStates.waiting_for_edit_article_content)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å—Ç–∞—Ç—å–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(article_id=article_id)
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_article_content: {e}")
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å—Ç–∞—Ç—å–∏
@router.message(LibraryAdminStates.waiting_for_edit_article_content)
async def process_edit_article_content(message: Message, state: FSMContext, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        new_content = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        if len(new_content) < 10:
            await message.answer(
                "–ó–º—ñ—Å—Ç —Å—Ç–∞—Ç—Ç—ñ –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 10 —Å–∏–º–≤–æ–ª—ñ–≤. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π –∑–º—ñ—Å—Ç:"
            )
            return
        
        if len(new_content) > 4000:
            await message.answer(
                "–ó–º—ñ—Å—Ç —Å—Ç–∞—Ç—Ç—ñ –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 4000 —Å–∏–º–≤–æ–ª—ñ–≤. –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç—à–∏–π –∑–º—ñ—Å—Ç:"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        article_id = data.get("article_id")
        
        if not article_id:
            await message.answer(
                "–ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
        article = await get_article_by_id(session, article_id)
        
        if not article:
            await message.answer(
                "–ü–æ–º–∏–ª–∫–∞: —Å—Ç–∞—Ç—Ç—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏
        success = await update_article(session, article_id, content=new_content)
        
        if not success:
            await message.answer(
                "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∑–º—ñ—Å—Ç —Å—Ç–∞—Ç—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log = AdminLog(
            admin_id=message.from_user.id,
            action_type="EDIT",
            entity_type="ARTICLE",
            entity_id=article_id,
            details={"field": "content", "content_length": len(new_content)}
        )
        session.add(log)
        await session.commit()
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        await message.answer(
            "–ó–º—ñ—Å—Ç —Å—Ç–∞—Ç—Ç—ñ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ —Å–æ —Å—Ç–∞—Ç—å–µ–π
        await message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑—ñ —Å—Ç–∞—Ç—Ç–µ—é:",
            reply_markup=await get_article_actions_kb(session, article_id)
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_edit_article_content: {e}")
        await message.answer(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –∑–º—ñ—Å—Ç—É —Å—Ç–∞—Ç—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Å—Ç–∞—Ç—å–∏
@router.callback_query(F.data.startswith("manage_article_images_"))
async def manage_article_images(callback: CallbackQuery, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ç–∞—Ç—å–∏ –∏–∑ callback_data
        article_id = int(callback.data.split("_")[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
        article = await get_article_by_id(session, article_id)
        
        if not article:
            await callback.message.edit_text(
                "–°—Ç–∞—Ç—Ç—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                reply_markup=get_admin_menu_kb()
            )
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏
        images = await get_article_images(session, article_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = f"–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏ —Å—Ç–∞—Ç—Ç—ñ \"{article.title}\".\n\n"
        message_text += f"–ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å: {len(images)}/5\n\n"
        
        if len(images) > 0:
            message_text += "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –∑ –Ω–æ–º–µ—Ä–æ–º –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ.\n"
        
        if len(images) < 5:
            message_text += "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"–î–æ–¥–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è\", —â–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."
        
        await callback.message.edit_text(
            message_text,
            reply_markup=await get_manage_images_kb(session, article_id)
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        for i, image in enumerate(images):
            await callback.message.answer_photo(
                photo=image.file_id,
                caption=f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è {i+1}/{len(images)}"
            )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log = AdminLog(
            admin_id=callback.from_user.id,
            action_type="VIEW",
            entity_type="IMAGES",
            details={"article_id": article_id, "article_title": article.title, "images_count": len(images)}
        )
        session.add(log)
        await session.commit()
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ manage_article_images: {e}")
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Å—Ç–∞—Ç—å–µ
@router.callback_query(F.data.startswith("add_image_"))
async def add_image(callback: CallbackQuery, state: FSMContext):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ç–∞—Ç—å–∏ –∏–∑ callback_data
        article_id = int(callback.data.split("_")[2])
        
        await callback.message.edit_text(
            "–í—ñ–¥–ø—Ä–∞–≤—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è —Å—Ç–∞—Ç—Ç—ñ.\n\n"
            "–ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è —Ñ–æ—Ä–º–∞—Ç–∏ JPEG, PNG, GIF."
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        await state.set_state(LibraryAdminStates.waiting_for_article_images)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å—Ç–∞—Ç—å–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(article_id=article_id)
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_image: {e}")
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@router.callback_query(F.data.startswith("delete_image_"))
async def delete_image(callback: CallbackQuery, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ callback_data
        image_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        image_result = await session.execute(
            select(ArticleImage).where(ArticleImage.image_id == image_id)
        )
        image = image_result.scalar_one_or_none()
        
        if not image:
            await callback.message.edit_text(
                "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞—Ç—Ç–µ—é.",
                reply_markup=get_admin_menu_kb()
            )
            await callback.answer()
            return
        
        article_id = image.article_id
        
        # –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        success = await delete_article_image(session, image_id)
        
        if not success:
            await callback.message.edit_text(
                "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=await get_manage_images_kb(session, article_id)
            )
            await callback.answer()
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log = AdminLog(
            admin_id=callback.from_user.id,
            action_type="DELETE",
            entity_type="IMAGE",
            entity_id=image_id,
            details={"article_id": article_id, "position": image.position}
        )
        session.add(log)
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
        article = await get_article_by_id(session, article_id)
        
        if not article:
            await callback.message.edit_text(
                "–°—Ç–∞—Ç—Ç—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                reply_markup=get_admin_menu_kb()
            )
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images = await get_article_images(session, article_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!\n\n"
        message_text += f"–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏ —Å—Ç–∞—Ç—Ç—ñ \"{article.title}\".\n\n"
        message_text += f"–ü–æ—Ç–æ—á–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å: {len(images)}/5\n\n"
        
        if len(images) > 0:
            message_text += "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –∑ –Ω–æ–º–µ—Ä–æ–º –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ.\n"
        
        if len(images) < 5:
            message_text += "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"–î–æ–¥–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è\", —â–æ–± –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."
        
        await callback.message.edit_text(
            message_text,
            reply_markup=await get_manage_images_kb(session, article_id)
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        for i, img in enumerate(images):
            await callback.message.answer_photo(
                photo=img.file_id,
                caption=f"–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è {i+1}/{len(images)}"
            )
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_image: {e}")
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏
@router.callback_query(F.data.startswith("delete_article_"))
async def delete_article_command(callback: CallbackQuery, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ç–∞—Ç—å–∏ –∏–∑ callback_data
        article_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
        article = await get_article_by_id(session, article_id)
        
        if not article:
            await callback.message.edit_text(
                "–°—Ç–∞—Ç—Ç—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                reply_markup=get_admin_menu_kb()
            )
            await callback.answer()
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
        message_text = f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ç—Ç—é \"{article.title}\"?\n\n"
        message_text += "–£–≤–∞–≥–∞! –ë—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —Ç–µ—Å—Ç–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ —Ü—ñ—î—é —Å—Ç–∞—Ç—Ç–µ—é!"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        return_callback = f"admin_article_{article_id}"
        
        await callback.message.edit_text(
            message_text,
            reply_markup=await get_confirm_delete_kb("article", article_id, return_callback)
        )
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ delete_article_command: {e}")
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—å–∏
@router.callback_query(F.data.startswith("confirm_delete_article_"))
async def confirm_delete_article(callback: CallbackQuery, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ç–∞—Ç—å–∏ –∏–∑ callback_data
        article_id = int(callback.data.split("_")[3])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
        article = await get_article_by_id(session, article_id)
        
        if not article:
            await callback.message.edit_text(
                "–°—Ç–∞—Ç—Ç—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞. –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
                reply_markup=get_admin_menu_kb()
            )
            await callback.answer()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—å–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        article_data = {
            "id": article.article_id,
            "title": article.title,
            "category_id": article.category_id
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        category_id = article.category_id
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—å—é –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        success = await delete_article(session, article_id)
        
        if not success:
            await callback.message.edit_text(
                f"–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ç—Ç—é \"{article.title}\".",
                reply_markup=await get_article_actions_kb(session, article_id)
            )
            await callback.answer()
            return
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        log = AdminLog(
            admin_id=callback.from_user.id,
            action_type="DELETE",
            entity_type="ARTICLE",
            entity_id=article_id,
            details=article_data
        )
        session.add(log)
        await session.commit()
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏
        await callback.message.edit_text(
            f"–°—Ç–∞—Ç—Ç—è \"{article.title}\" —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞!"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category = await get_category_by_id(session, category_id)
        
        if category:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            await callback.message.answer(
                f"–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É —Å—Ç–∞—Ç–µ–π –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó \"{category.name}\":",
                reply_markup=await get_admin_articles_kb(session, category_id)
            )
        else:
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            await callback.message.answer(
                "–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –∑–Ω–∞–Ω—å:",
                reply_markup=await get_admin_categories_kb(session)
            )
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_delete_article: {e}")
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—Ç—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_menu_kb()
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
@router.callback_query(F.data == "back_to_admin_menu")
async def back_to_admin_menu(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_text(
            "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é."
        )
        
        await callback.message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_admin_menu_kb()
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_admin_menu: {e}")
        await callback.message.edit_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        await callback.answer()
################################################################################################
#################################################################################################################
###############################################################################################
