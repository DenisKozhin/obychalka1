import sys
import os
from typing import List, Dict, Any, Optional
import json

# –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from bot.database.models import Article, Test, Question, Answer, User
from bot.utils.logger import logger
from bot.keyboards.admin_kb import get_admin_menu_kb

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Å—Ç–∞–º–∏
from bot.database.operations_library import (
    get_test_by_id, get_tests_by_article, create_test, update_test, delete_test,
    get_questions_by_test, create_question, update_question, delete_question,
    create_answer, update_answer, delete_answer
)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM (Finite State Machine)
class TestAdminStates(StatesGroup):
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ—Å—Ç–∞–º–∏
    waiting_for_test_title = State()
    waiting_for_pass_threshold = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    waiting_for_question_text = State()
    waiting_for_question_points = State()
    waiting_for_edit_question = State()
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–≤–µ—Ç–∞–º–∏
    waiting_for_answer_text = State()
    waiting_for_answer_correct = State()
    waiting_for_another_answer = State()
    waiting_for_edit_answer = State()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏
router = Router()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏
def get_test_management_kb():
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç", callback_data="create_test"),
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤", callback_data="list_tests"),
        InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="back_to_admin_menu")
    ]
    
    for button in buttons:
        builder.add(button)
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
def get_test_actions_kb(test_id: int, article_id: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç", callback_data=f"edit_test_{test_id}"),
        InlineKeyboardButton(text="‚ùì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞–º–∏", callback_data=f"manage_questions_{test_id}"),
        InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç", callback_data=f"delete_test_{test_id}"),
        InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤", callback_data=f"tests_for_article_{article_id}")
    ]
    
    for button in buttons:
        builder.add(button)
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
def get_questions_list_kb(test_id: int, questions: List[Question]):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    for question in questions:
        builder.add(InlineKeyboardButton(
            text=f"‚ùì {question.question_text[:30]}...",
            callback_data=f"question_{question.question_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    builder.add(InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
        callback_data=f"add_question_{test_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É",
        callback_data=f"test_details_{test_id}"
    ))
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –≤–æ–ø—Ä–æ—Å–æ–º
def get_question_actions_kb(question_id: int, test_id: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"edit_question_{question_id}"),
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç", callback_data=f"add_answer_{question_id}"),
        InlineKeyboardButton(text="üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–≤–µ—Ç–æ–≤", callback_data=f"view_answers_{question_id}"),
        InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"delete_question_{question_id}"),
        InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data=f"manage_questions_{test_id}")
    ]
    
    for button in buttons:
        builder.add(button)
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
def get_answers_list_kb(answers: List[Answer], question_id: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    sorted_answers = sorted(answers, key=lambda x: x.position)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    for answer in sorted_answers:
        prefix = "‚úÖ" if answer.is_correct else "‚ùå"
        builder.add(InlineKeyboardButton(
            text=f"{prefix} {answer.answer_text[:30]}...",
            callback_data=f"answer_{answer.answer_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    builder.add(InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç",
        callback_data=f"add_answer_{question_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å—É",
        callback_data=f"question_{question_id}"
    ))
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
def get_confirm_delete_kb(entity_type: str, entity_id: int, return_callback: str):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    builder.add(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{entity_type}_{entity_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=return_callback)
    )
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–¢–µ—Å—Ç—ã" –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.callback_query(F.data == "admin_tests")
async def admin_tests_command(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞–º–∏"""
    await callback.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_test_management_kb()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
@router.callback_query(F.data == "back_to_admin_menu")
async def back_to_admin_menu_from_tests(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=get_admin_menu_kb()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
@router.callback_query(F.data == "list_tests")
async def list_tests_command(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ç–µ—Å—Ç—ã
    from sqlalchemy import func
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ç–µ—Å—Ç—ã
    result = await session.execute(
        select(Article)
        .join(Test, Article.article_id == Test.article_id)
        .group_by(Article.article_id)
        .order_by(Article.title)
    )
    articles = result.scalars().all()
    
    if not articles:
        await callback.message.edit_text(
            "–¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—å–∏
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    for article in articles:
        builder.add(InlineKeyboardButton(
            text=article.title,
            callback_data=f"tests_for_article_{article.article_id}"
        ))
    
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="admin_tests"
    ))
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏
@router.callback_query(F.data.startswith("tests_for_article_"))
async def tests_for_article(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ç–∞—Ç—å–∏ –∏–∑ callback_data
    article_id = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
    article_result = await session.execute(select(Article).where(Article.article_id == article_id))
    article = article_result.scalar_one_or_none()
    
    if not article:
        await callback.message.edit_text(
            "–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞—Ç—å–∏
    tests = await get_tests_by_article(session, article_id)
    
    if not tests:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        
        builder.add(InlineKeyboardButton(
            text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞—Ç—å–∏",
            callback_data=f"create_test_for_article_{article_id}"
        ))
        
        builder.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Å—Ç–∞—Ç–µ–π",
            callback_data="list_tests"
        ))
        
        builder.adjust(1)
        
        await callback.message.edit_text(
            f"–î–ª—è —Å—Ç–∞—Ç—å–∏ \"{article.title}\" –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤.",
            reply_markup=builder.as_markup()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    for test in tests:
        builder.add(InlineKeyboardButton(
            text=test.title,
            callback_data=f"test_details_{test.test_id}"
        ))
    
    builder.add(InlineKeyboardButton(
        text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç",
        callback_data=f"create_test_for_article_{article_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Å—Ç–∞—Ç–µ–π",
        callback_data="list_tests"
    ))
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"–¢–µ—Å—Ç—ã –¥–ª—è —Å—Ç–∞—Ç—å–∏ \"{article.title}\":",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Ç–µ—Å—Ç–∞
@router.callback_query(F.data.startswith("test_details_"))
async def test_details(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Ç–µ—Å—Ç–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ—Å—Ç–∞ –∏–∑ callback_data
    test_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    test = await get_test_by_id(session, test_id)
    
    if not test:
        await callback.message.edit_text(
            "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
    article_result = await session.execute(select(Article).where(Article.article_id == test.article_id))
    article = article_result.scalar_one_or_none()
    
    if not article:
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—å—è –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ—Å—Ç—É
    from bot.database.operations_library import get_test_statistics
    stats = await get_test_statistics(session, test_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ—Å—Ç–µ
    message_text = (
        f"üìù <b>–¢–µ—Å—Ç:</b> {test.title}\n"
        f"üìÑ <b>–°—Ç–∞—Ç—å—è:</b> {article.title}\n"
        f"üìä <b>–ü–æ—Ä–æ–≥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:</b> {test.pass_threshold}%\n\n"
        f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"üìà –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {stats['total_attempts']}\n"
        f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['unique_users']}\n"
        f"‚≠ê –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {stats['avg_score']}\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π: {stats['success_rate']}%\n"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
    questions_count = len(test.questions)
    
    message_text += f"\n‚ùì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_count}"
    
    await callback.message.edit_text(
        message_text,
        reply_markup=get_test_actions_kb(test_id, article.article_id),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—å–∏
@router.callback_query(F.data.startswith("create_test_for_article_"))
async def create_test_for_article(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—å–∏"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ç–∞—Ç—å–∏ –∏–∑ callback_data
    article_id = int(callback.data.split("_")[4])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å—Ç–∞—Ç—å–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(article_id=article_id)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
    await state.set_state(TestAdminStates.waiting_for_test_title)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
@router.message(TestAdminStates.waiting_for_test_title)
async def process_test_title(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    title = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è
    if len(title) < 3 or len(title) > 200:
        await message.answer(
            "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(test_title=title)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä–æ–≥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—á–∏—Å–ª–æ –æ—Ç 60 –¥–æ 100):"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    await state.set_state(TestAdminStates.waiting_for_pass_threshold)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
@router.message(TestAdminStates.waiting_for_pass_threshold)
async def process_pass_threshold(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ—Ä–æ–≥–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    try:
        threshold = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if threshold < 60 or threshold > 100:
            await message.answer(
                "–ü–æ—Ä–æ–≥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 60 –¥–æ 100. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
            )
            return
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    article_id = data.get("article_id")
    test_title = data.get("test_title")
    
    if not article_id or not test_title:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—å–µ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ."
        )
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    article_result = await session.execute(select(Article).where(Article.article_id == article_id))
    article = article_result.scalar_one_or_none()
    
    if not article:
        await message.answer(
            "–û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.",
            reply_markup=get_test_management_kb()
        )
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ—Å—Ç
    try:
        new_test = await create_test(
            session=session,
            title=test_title,
            article_id=article_id,
            pass_threshold=threshold,
            admin_id=message.from_user.id
        )
        
        if not new_test:
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_test_management_kb()
            )
            await state.clear()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        
        builder.add(InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã",
            callback_data=f"manage_questions_{new_test.test_id}"
        ))
        
        builder.add(InlineKeyboardButton(
            text="üîô –ö –¥–µ—Ç–∞–ª—è–º —Ç–µ—Å—Ç–∞",
            callback_data=f"test_details_{new_test.test_id}"
        ))
        
        builder.adjust(1)
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞
        await message.answer(
            f"–¢–µ—Å—Ç \"{test_title}\" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å—Ç–∞—Ç—å–∏ \"{article.title}\"!\n\n"
            f"–ü–æ—Ä–æ–≥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {threshold}%\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫ —Ç–µ—Å—Ç—É.",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}",
            reply_markup=get_test_management_kb()
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
@router.callback_query(F.data.startswith("edit_test_"))
async def edit_test_command(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ—Å—Ç–∞ –∏–∑ callback_data
    test_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    test = await get_test_by_id(session, test_id)
    
    if not test:
        await callback.message.edit_text(
            "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
        callback_data=f"edit_test_title_{test_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üìä –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è",
        callback_data=f"edit_test_threshold_{test_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É",
        callback_data=f"test_details_{test_id}"
    ))
    
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ \"{test.title}\"\n\n"
        f"–¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: {test.pass_threshold}%\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
@router.callback_query(F.data.startswith("edit_test_title_"))
async def edit_test_title(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ—Å—Ç–∞ –∏–∑ callback_data
    test_id = int(callback.data.split("_")[3])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(test_id=test_id)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞:"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
    await state.set_state(TestAdminStates.waiting_for_test_title)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
@router.callback_query(F.data.startswith("edit_test_threshold_"))
async def edit_test_threshold(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ—Å—Ç–∞ –∏–∑ callback_data
    test_id = int(callback.data.split("_")[3])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(test_id=test_id)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä–æ–≥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—á–∏—Å–ª–æ –æ—Ç 60 –¥–æ 100):"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    await state.set_state(TestAdminStates.waiting_for_pass_threshold)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
@router.message(TestAdminStates.waiting_for_pass_threshold)
async def process_edit_threshold(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ø–æ—Ä–æ–≥–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    try:
        threshold = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if threshold < 60 or threshold > 100:
            await message.answer(
                "–ü–æ—Ä–æ–≥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 60 –¥–æ 100. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
            )
            return
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ—Ä–æ–≥–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    test_id = data.get("test_id")
    
    # –ï—Å–ª–∏ –Ω–µ—Ç test_id, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
    if not test_id:
        # –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ (—É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤—ã—à–µ)
        return await process_pass_threshold(message, state, session)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä–æ–≥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    try:
        success = await update_test(
            session=session,
            test_id=test_id,
            pass_threshold=threshold,
            admin_id=message.from_user.id
        )
        
        if not success:
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞. –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –¥—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞.",
                reply_markup=get_test_management_kb()
            )
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
        test = await get_test_by_id(session, test_id)
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        await message.answer(
            f"–ü–æ—Ä–æ–≥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ \"{test.title}\" —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {threshold}%",
            reply_markup=get_test_actions_kb(test_id, test.article_id)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}",
            reply_markup=get_test_management_kb()
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
@router.callback_query(F.data.startswith("delete_test_"))
async def delete_test_command(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ—Å—Ç–∞ –∏–∑ callback_data
    test_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    test = await get_test_by_id(session, test_id)
    
    if not test:
        await callback.message.edit_text(
            "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    await callback.message.edit_text(
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç \"{test.title}\"?\n\n"
        f"–í–Ω–∏–º–∞–Ω–∏–µ! –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º —Ç–µ—Å—Ç–æ–º. "
        f"–≠—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=get_confirm_delete_kb("test", test_id, f"test_details_{test_id}")
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
@router.callback_query(F.data.startswith("confirm_delete_test_"))
async def confirm_delete_test(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ—Å—Ç–∞ –∏–∑ callback_data
    test_id = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    test = await get_test_by_id(session, test_id)
    
    if not test:
        await callback.message.edit_text(
            "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º article_id –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    article_id = test.article_id
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç
    try:
        success = await delete_test(
            session=session,
            test_id=test_id,
            admin_id=callback.from_user.id
        )
        
        if not success:
            await callback.message.edit_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞.",
                reply_markup=get_test_management_kb()
            )
            await callback.answer()
            return
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
        await callback.message.edit_text(
            f"–¢–µ—Å—Ç \"{test.title}\" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —Å—Ç–∞—Ç—å–∏
        await callback.message.answer(
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞—Ç—å–∏?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–î–∞", callback_data=f"tests_for_article_{article_id}"),
                InlineKeyboardButton(text="–ù–µ—Ç", callback_data="admin_tests")
            ]])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
        await callback.message.edit_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}",
            reply_markup=get_test_management_kb()
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏ —Ç–µ—Å—Ç–∞
@router.callback_query(F.data.startswith("manage_questions_"))
async def manage_questions_command(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏ —Ç–µ—Å—Ç–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ—Å—Ç–∞ –∏–∑ callback_data
    test_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    test = await get_test_by_id(session, test_id)
    
    if not test:
        await callback.message.edit_text(
            "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞
    questions = await get_questions_by_test(session, test_id)
    
    if not questions:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        
        builder.add(InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
            callback_data=f"add_question_{test_id}"
        ))
        
        builder.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–µ—Å—Ç—É",
            callback_data=f"test_details_{test_id}"
        ))
        
        builder.adjust(1)
        
        await callback.message.edit_text(
            f"–£ —Ç–µ—Å—Ç–∞ \"{test.title}\" –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
            f"–î–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç.",
            reply_markup=builder.as_markup()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏
    await callback.message.edit_text(
        f"–í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞ \"{test.title}\" ({len(questions)} —à—Ç.):\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=get_questions_list_kb(test_id, questions)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
@router.callback_query(F.data.startswith("add_question_"))
async def add_question_command(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∫ —Ç–µ—Å—Ç—É"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ—Å—Ç–∞ –∏–∑ callback_data
    test_id = int(callback.data.split("_")[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(test_id=test_id)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
    await state.set_state(TestAdminStates.waiting_for_question_text)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
@router.message(TestAdminStates.waiting_for_question_text)
async def process_question_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    question_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
    if len(question_text) < 5 or len(question_text) > 500:
        await message.answer(
            "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 5 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(question_text=question_text)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–µ—Å –≤–æ–ø—Ä–æ—Å–∞
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤–æ–ø—Ä–æ—Å–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –æ—Ç 1 –¥–æ 5):"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–µ—Å–∞ –≤–æ–ø—Ä–æ—Å–∞
    await state.set_state(TestAdminStates.waiting_for_question_points)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–µ—Å–∞ –≤–æ–ø—Ä–æ—Å–∞
@router.message(TestAdminStates.waiting_for_question_points)
async def process_question_points(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤–µ—Å–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    try:
        points = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if points < 1 or points > 5:
            await message.answer(
                "–í–µ—Å –≤–æ–ø—Ä–æ—Å–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 5. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
            )
            return
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–µ—Å–∞ –≤–æ–ø—Ä–æ—Å–∞:"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    test_id = data.get("test_id")
    question_text = data.get("question_text")
    
    if not test_id or not question_text:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ—Å—Ç–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–µ –≤–æ–ø—Ä–æ—Å–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –∑–∞–Ω–æ–≤–æ."
        )
        await state.clear()
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    try:
        new_question = await create_question(
            session=session,
            test_id=test_id,
            question_text=question_text,
            points=points,
            admin_id=message.from_user.id
        )
        
        if not new_question:
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        await state.update_data(question_id=new_question.question_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        
        builder.add(InlineKeyboardButton(
            text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã",
            callback_data=f"add_answer_{new_question.question_id}"
        ))
        
        builder.add(InlineKeyboardButton(
            text="üîô –ö —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤",
            callback_data=f"manage_questions_{test_id}"
        ))
        
        builder.adjust(1)
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
        await message.answer(
            f"–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"–¢–µ–∫—Å—Ç: {question_text}\n"
            f"–í–µ—Å: {points}\n\n"
            f"–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤.",
            reply_markup=builder.as_markup()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}"
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞
@router.callback_query(F.data.startswith("question_"))
async def question_details(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –≤–æ–ø—Ä–æ—Å–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback_data
    question_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
    result = await session.execute(
        select(Question).where(Question.question_id == question_id).options(joinedload(Question.answers))
    )
    question = result.scalar_one_or_none()
    
    if not question:
        await callback.message.edit_text(
            "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    result = await session.execute(select(Test).where(Test.test_id == question.test_id))
    test = result.scalar_one_or_none()
    
    if not test:
        await callback.message.edit_text(
            "–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∫ –≤–æ–ø—Ä–æ—Å—É
    answers = question.answers if hasattr(question, 'answers') else []
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–ø—Ä–æ—Å–µ
    correct_answers = sum(1 for a in answers if a.is_correct)
    answers_text = "\n".join([
        f"{'‚úÖ' if a.is_correct else '‚ùå'} {a.answer_text}" for a in sorted(answers, key=lambda x: x.position)
    ])
    
    message_text = (
        f"<b>–í–æ–ø—Ä–æ—Å:</b> {question.question_text}\n\n"
        f"<b>–í–µ—Å:</b> {question.points}\n"
        f"<b>–¢–µ—Å—Ç:</b> {test.title}\n"
        f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤:</b> {len(answers)}\n"
        f"<b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b> {correct_answers}\n\n"
    )
    
    if answers:
        message_text += f"<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:</b>\n{answers_text}"
    else:
        message_text += "–£ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–∫–∞ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤."
    
    await callback.message.edit_text(
        message_text,
        reply_markup=get_question_actions_kb(question_id, test.test_id),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
@router.callback_query(F.data.startswith("edit_question_"))
async def edit_question_command(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback_data
    question_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
    result = await session.execute(select(Question).where(Question.question_id == question_id))
    question = result.scalar_one_or_none()
    
    if not question:
        await callback.message.edit_text(
            "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –∏ —Ç–µ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(question_id=question_id, test_id=question.test_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",
        callback_data=f"edit_question_text_{question_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üìä –ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å –≤–æ–ø—Ä–æ—Å–∞",
        callback_data=f"edit_question_points_{question_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å—É",
        callback_data=f"question_{question_id}"
    ))
    
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞:\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:</b> {question.question_text}\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π –≤–µ—Å:</b> {question.points}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
@router.callback_query(F.data.startswith("edit_question_text_"))
async def edit_question_text(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback_data
    question_id = int(callback.data.split("_")[3])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(question_id=question_id, edit_mode=True)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
    await state.set_state(TestAdminStates.waiting_for_question_text)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Å–∞ –≤–æ–ø—Ä–æ—Å–∞
@router.callback_query(F.data.startswith("edit_question_points_"))
async def edit_question_points(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Å–∞ –≤–æ–ø—Ä–æ—Å–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback_data
    question_id = int(callback.data.split("_")[3])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(question_id=question_id, edit_mode=True)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å –≤–æ–ø—Ä–æ—Å–∞ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤, –æ—Ç 1 –¥–æ 5):"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–µ—Å–∞ –≤–æ–ø—Ä–æ—Å–∞
    await state.set_state(TestAdminStates.waiting_for_question_points)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
@router.callback_query(F.data.startswith("delete_question_"))
async def delete_question_command(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback_data
    question_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
    result = await session.execute(select(Question).where(Question.question_id == question_id))
    question = result.scalar_one_or_none()
    
    if not question:
        await callback.message.edit_text(
            "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    await callback.message.edit_text(
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å: \"{question.question_text}\"?\n\n"
        f"–í–Ω–∏–º–∞–Ω–∏–µ! –ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –æ—Ç–≤–µ—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º. "
        f"–≠—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=get_confirm_delete_kb("question", question_id, f"question_{question_id}")
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
@router.callback_query(F.data.startswith("confirm_delete_question_"))
async def confirm_delete_question(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback_data
    question_id = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    result = await session.execute(select(Question).where(Question.question_id == question_id))
    question = result.scalar_one_or_none()
    
    if not question:
        await callback.message.edit_text(
            "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º test_id –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    test_id = question.test_id
    
    # –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
    try:
        success = await delete_question(
            session=session,
            question_id=question_id,
            admin_id=callback.from_user.id
        )
        
        if not success:
            await callback.message.edit_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞.",
                reply_markup=get_test_management_kb()
            )
            await callback.answer()
            return
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
        await callback.message.edit_text(
            f"–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data=f"manage_questions_{test_id}")
            ]])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
        await callback.message.edit_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}",
            reply_markup=get_test_management_kb()
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
@router.callback_query(F.data.startswith("add_answer_"))
async def add_answer_command(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∫ –≤–æ–ø—Ä–æ—Å—É"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback_data
    question_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
    result = await session.execute(select(Question).where(Question.question_id == question_id).options(joinedload(Question.answers)))
    question = result.scalar_one_or_none()
    
    if not question:
        await callback.message.edit_text(
            "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 6)
    if hasattr(question, 'answers') and len(question.answers) >= 6:
        await callback.message.edit_text(
            "–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ (6) –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.",
            reply_markup=get_question_actions_kb(question_id, question.test_id)
        )
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –∏ —Ç–µ—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        question_id=question_id, 
        test_id=question.test_id,
        position=len(question.answers) + 1 if hasattr(question, 'answers') else 1
    )
    
    await callback.message.edit_text(
        f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:\n\n"
        f"{question.question_text}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    await state.set_state(TestAdminStates.waiting_for_answer_text)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
@router.message(TestAdminStates.waiting_for_answer_text)
async def process_answer_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    answer_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
    if len(answer_text) < 1 or len(answer_text) > 200:
        await message.answer(
            "–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(answer_text=answer_text)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="‚úÖ –î–∞, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π",
        callback_data="answer_correct_true"
    ))
    
    builder.add(InlineKeyboardButton(
        text="‚ùå –ù–µ—Ç, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π",
        callback_data="answer_correct_false"
    ))
    
    builder.adjust(1)
    
    await message.answer(
        "–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º?",
        reply_markup=builder.as_markup()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
    await state.set_state(TestAdminStates.waiting_for_answer_correct)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
@router.callback_query(TestAdminStates.waiting_for_answer_correct, F.data.startswith("answer_correct_"))
async def process_answer_correct(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
    is_correct = callback.data.split("_")[2] == "true"
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    question_id = data.get("question_id")
    answer_text = data.get("answer_text")
    position = data.get("position", 1)
    
    if not question_id or not answer_text:
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–æ–ø—Ä–æ—Å–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç–µ –æ—Ç–≤–µ—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∑–∞–Ω–æ–≤–æ."
        )
        await state.clear()
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    try:
        new_answer = await create_answer(
            session=session,
            question_id=question_id,
            answer_text=answer_text,
            is_correct=is_correct,
            position=position,
            admin_id=callback.from_user.id
        )
        
        if not new_answer:
            await callback.message.edit_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            await state.clear()
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
        result = await session.execute(
            select(Question).where(Question.question_id == question_id).options(joinedload(Question.answers))
        )
        question = result.scalar_one_or_none()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ—Ç–≤–µ—Ç—ã
        if hasattr(question, 'answers') and len(question.answers) < 6:
            # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç
            await callback.message.edit_text(
                f"–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–¢–µ–∫—Å—Ç: {answer_text}\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π: {'–î–∞' if is_correct else '–ù–µ—Ç'}\n\n"
                f"–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç? (–≤—Å–µ–≥–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ 6 –æ—Ç–≤–µ—Ç–æ–≤)"
            )
            
            from aiogram.utils.keyboard import InlineKeyboardBuilder
            from aiogram.types import InlineKeyboardButton
            
            builder = InlineKeyboardBuilder()
            
            builder.add(InlineKeyboardButton(
                text="‚ûï –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ—Ç–≤–µ—Ç",
                callback_data=f"add_answer_{question_id}"
            ))
            
            builder.add(InlineKeyboardButton(
                text="‚úÖ –ù–µ—Ç, –∑–∞–≤–µ—Ä—à–∏—Ç—å",
                callback_data=f"view_answers_{question_id}"
            ))
            
            builder.adjust(1)
            
            await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤
            await callback.message.edit_text(
                f"–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ (6) –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."
            )
            
            await callback.message.answer(
                "–í—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞:",
                reply_markup=get_answers_list_kb(question.answers, question_id)
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await callback.message.edit_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}"
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤
@router.callback_query(F.data.startswith("view_answers_"))
async def view_answers(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ callback_data
    question_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
    result = await session.execute(
        select(Question).where(Question.question_id == question_id).options(joinedload(Question.answers))
    )
    question = result.scalar_one_or_none()
    
    if not question:
        await callback.message.edit_text(
            "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∫ –≤–æ–ø—Ä–æ—Å—É
    answers = question.answers if hasattr(question, 'answers') else []
    
    if not answers:
        await callback.message.edit_text(
            f"–£ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç.",
            reply_markup=get_question_actions_kb(question_id, question.test_id)
        )
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
    await callback.message.edit_text(
        f"–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å: {question.question_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=get_answers_list_kb(answers, question_id)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –æ—Ç–≤–µ—Ç–∞
@router.callback_query(F.data.startswith("answer_"))
async def answer_details(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –æ—Ç–≤–µ—Ç–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Ç–≤–µ—Ç–∞ –∏–∑ callback_data
    answer_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ
    result = await session.execute(select(Answer).where(Answer.answer_id == answer_id))
    answer = result.scalar_one_or_none()
    
    if not answer:
        await callback.message.edit_text(
            "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
    result = await session.execute(select(Question).where(Question.question_id == answer.question_id))
    question = result.scalar_one_or_none()
    
    if not question:
        await callback.message.edit_text(
            "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏ —Ç–µ—Å—Ç–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ—Å—Ç–∞ –∏–∑ callback_data

    answer_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ
    result = await session.execute(select(Answer).where(Answer.answer_id == answer_id))
    answer = result.scalar_one_or_none()
    
    if not answer:
        await callback.message.edit_text(
            "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
    result = await session.execute(select(Question).where(Question.question_id == answer.question_id))
    question = result.scalar_one_or_none()
    
    if not question:
        await callback.message.edit_text(
            "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –æ—Ç–≤–µ—Ç–æ–º
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞",
        callback_data=f"edit_answer_text_{answer_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text=f"{'‚úÖ' if not answer.is_correct else '‚ùå'} –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞",
        callback_data=f"toggle_answer_correct_{answer_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üîº –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö",
        callback_data=f"move_answer_up_{answer_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üîΩ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑",
        callback_data=f"move_answer_down_{answer_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="‚ùå –£–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç",
        callback_data=f"delete_answer_{answer_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üîô –ö —Å–ø–∏—Å–∫—É –æ—Ç–≤–µ—Ç–æ–≤",
        callback_data=f"view_answers_{question.question_id}"
    ))
    
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"<b>–û—Ç–≤–µ—Ç:</b> {answer.answer_text}\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ‚úÖ' if answer.is_correct else '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ‚ùå'}\n"
        f"<b>–ü–æ–∑–∏—Ü–∏—è:</b> {answer.position}\n"
        f"<b>–í–æ–ø—Ä–æ—Å:</b> {question.question_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
@router.callback_query(F.data.startswith("edit_answer_text_"))
async def edit_answer_text(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Ç–≤–µ—Ç–∞ –∏–∑ callback_data
    answer_id = int(callback.data.split("_")[3])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–≤–µ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(answer_id=answer_id)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    await state.set_state(TestAdminStates.waiting_for_edit_answer)
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞
@router.message(TestAdminStates.waiting_for_edit_answer)
async def process_edit_answer_text(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–≤–µ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    answer_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
    if len(answer_text) < 1 or len(answer_text) > 200:
        await message.answer(
            "–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 1 –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç:"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    answer_id = data.get("answer_id")
    
    if not answer_id:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–≤–µ—Ç–µ. –ù–∞—á–Ω–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."
        )
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ
    result = await session.execute(select(Answer).where(Answer.answer_id == answer_id))
    answer = result.scalar_one_or_none()
    
    if not answer:
        await message.answer(
            "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    try:
        answer.answer_text = answer_text
        await session.commit()
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        await message.answer(
            f"–¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {answer_text}"
        )
        
        # –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫ –¥–µ—Ç–∞–ª—è–º –æ—Ç–≤–µ—Ç–∞
        await message.answer(
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –æ—Ç–≤–µ—Ç–∞?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–î–∞", callback_data=f"answer_{answer_id}")
            ]])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}"
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π)
@router.callback_query(F.data.startswith("toggle_answer_correct_"))
async def toggle_answer_correct(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Ç–≤–µ—Ç–∞ –∏–∑ callback_data
    answer_id = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ
    result = await session.execute(select(Answer).where(Answer.answer_id == answer_id))
    answer = result.scalar_one_or_none()
    
    if not answer:
        await callback.message.edit_text(
            "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    try:
        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        answer.is_correct = not answer.is_correct
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        result = await session.execute(
            select(Question).where(Question.question_id == answer.question_id).options(joinedload(Question.answers))
        )
        question = result.scalar_one_or_none()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        if hasattr(question, 'answers'):
            correct_answers = [a for a in question.answers if a.is_correct]
            if not correct_answers:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                await callback.message.edit_text(
                    f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –£ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. "
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.\n\n"
                    f"<b>–û—Ç–≤–µ—Ç:</b> {answer.answer_text}\n"
                    f"<b>–°—Ç–∞—Ç—É—Å:</b> {'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ‚úÖ' if answer.is_correct else '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ‚ùå'}\n"
                    f"<b>–ü–æ–∑–∏—Ü–∏—è:</b> {answer.position}\n"
                    f"<b>–í–æ–ø—Ä–æ—Å:</b> {question.question_text}",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ç–≤–µ—Ç—É", callback_data=f"answer_{answer_id}")
                    ]]),
                    parse_mode="HTML"
                )
                await callback.answer("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –£ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!")
                return
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –∫ –¥–µ—Ç–∞–ª—è–º –æ—Ç–≤–µ—Ç–∞
        await callback.message.edit_text(
            f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {'–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ‚úÖ' if answer.is_correct else '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ‚ùå'}"
        )
        await callback.message.answer(
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –æ—Ç–≤–µ—Ç–∞?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–î–∞", callback_data=f"answer_{answer_id}")
            ]])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
        await callback.message.edit_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞: {e}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ç–≤–µ—Ç—É", callback_data=f"answer_{answer_id}")
            ]])
        )
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤–≤–µ—Ä—Ö
@router.callback_query(F.data.startswith("move_answer_up_"))
async def move_answer_up(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤–≤–µ—Ä—Ö –ø–æ —Å–ø–∏—Å–∫—É"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Ç–≤–µ—Ç–∞ –∏–∑ callback_data
    answer_id = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ
    result = await session.execute(select(Answer).where(Answer.answer_id == answer_id))
    answer = result.scalar_one_or_none()
    
    if not answer:
        await callback.message.edit_text(
            "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    result = await session.execute(
        select(Answer).where(Answer.question_id == answer.question_id).order_by(Answer.position)
    )
    answers = result.scalars().all()
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
    current_index = next((i for i, a in enumerate(answers) if a.answer_id == answer_id), None)
    
    if current_index is None or current_index == 0:
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        await callback.answer("–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ —Å–ø–∏—Å–∫–∞")
        return
    
    try:
        # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º
        prev_answer = answers[current_index - 1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
        temp_position = answer.position
        answer.position = prev_answer.position
        prev_answer.position = temp_position
        
        await session.commit()
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –æ—Ç–≤–µ—Ç–æ–≤
        await callback.message.edit_text(
            f"–û—Ç–≤–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–≤–µ—Ä—Ö."
        )
        await callback.message.answer(
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—Ç–≤–µ—Ç–æ–≤?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–î–∞", callback_data=f"view_answers_{answer.question_id}")
            ]])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await callback.message.edit_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ç–≤–µ—Ç—É", callback_data=f"answer_{answer_id}")
            ]])
        )
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤–Ω–∏–∑
@router.callback_query(F.data.startswith("move_answer_down_"))
async def move_answer_down(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤–Ω–∏–∑ –ø–æ —Å–ø–∏—Å–∫—É"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Ç–≤–µ—Ç–∞ –∏–∑ callback_data
    answer_id = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ
    result = await session.execute(select(Answer).where(Answer.answer_id == answer_id))
    answer = result.scalar_one_or_none()
    
    if not answer:
        await callback.message.edit_text(
            "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    result = await session.execute(
        select(Answer).where(Answer.question_id == answer.question_id).order_by(Answer.position)
    )
    answers = result.scalars().all()
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
    current_index = next((i for i, a in enumerate(answers) if a.answer_id == answer_id), None)
    
    if current_index is None or current_index == len(answers) - 1:
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        await callback.answer("–≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞")
        return
    
    try:
        # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç —Å–æ —Å–ª–µ–¥—É—é—â–∏–º
        next_answer = answers[current_index + 1]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏
        temp_position = answer.position
        answer.position = next_answer.position
        next_answer.position = temp_position
        
        await session.commit()
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –æ—Ç–≤–µ—Ç–æ–≤
        await callback.message.edit_text(
            f"–û—Ç–≤–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–Ω–∏–∑."
        )
        await callback.message.answer(
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—Ç–≤–µ—Ç–æ–≤?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–î–∞", callback_data=f"view_answers_{answer.question_id}")
            ]])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await callback.message.edit_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ç–≤–µ—Ç—É", callback_data=f"answer_{answer_id}")
            ]])
        )
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
@router.callback_query(F.data.startswith("delete_answer_"))
async def delete_answer_command(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Ç–≤–µ—Ç–∞ –∏–∑ callback_data
    answer_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ
    result = await session.execute(select(Answer).where(Answer.answer_id == answer_id))
    answer = result.scalar_one_or_none()
    
    if not answer:
        await callback.message.edit_text(
            "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º question_id –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    question_id = answer.question_id
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    await callback.message.edit_text(
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç: \"{answer.answer_text}\"?\n\n"
        f"–≠—Ç—É –æ–ø–µ—Ä–∞—Ü–∏—é –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=get_confirm_delete_kb("answer", answer_id, f"answer_{answer_id}")
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
@router.callback_query(F.data.startswith("confirm_delete_answer_"))
async def confirm_delete_answer(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Ç–≤–µ—Ç–∞ –∏–∑ callback_data
    answer_id = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    result = await session.execute(select(Answer).where(Answer.answer_id == answer_id))
    answer = result.scalar_one_or_none()
    
    if not answer:
        await callback.message.edit_text(
            "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º question_id –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    question_id = answer.question_id
    is_correct = answer.is_correct
    
    # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç
    try:
        await session.delete(answer)
        await session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, –∏ –µ—Å—Ç—å –ª–∏ –µ—â–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if is_correct:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
            result = await session.execute(
                select(Answer).where(Answer.question_id == question_id)
            )
            remaining_answers = result.scalars().all()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—Ç–≤–µ—Ç–æ–≤ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
            has_correct = any(a.is_correct for a in remaining_answers)
            
            if not has_correct and remaining_answers:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                await callback.message.edit_text(
                    f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —É –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. "
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–º–æ–≥—É—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="–ö —Å–ø–∏—Å–∫—É –æ—Ç–≤–µ—Ç–æ–≤", callback_data=f"view_answers_{question_id}")
                    ]])
                )
                await callback.answer("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –£ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!")
                return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—Ç–≤–µ—Ç–æ–≤
        result = await session.execute(
            select(Answer).where(Answer.question_id == question_id).order_by(Answer.position)
        )
        remaining_answers = result.scalars().all()
        
        for i, ans in enumerate(remaining_answers):
            ans.position = i + 1
        
        await session.commit()
        
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
        await callback.message.edit_text(
            f"–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–ö —Å–ø–∏—Å–∫—É –æ—Ç–≤–µ—Ç–æ–≤", callback_data=f"view_answers_{question_id}")
            ]])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await callback.message.edit_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ—Ç–≤–µ—Ç—É", callback_data=f"answer_{answer_id}")
            ]])
        )
    
    await callback.answer()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

async def generate_test_statistics(session: AsyncSession, test_id: int) -> Dict[str, Any]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ—Å—Ç—É
    
    Args:
        session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        test_id: ID —Ç–µ—Å—Ç–∞
    
    Returns:
        Dict: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    from sqlalchemy import func
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    result = await session.execute(
        select(func.count(TestAttempt.attempt_id)).where(TestAttempt.test_id == test_id)
    )
    total_attempts = result.scalar() or 0
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    result = await session.execute(
        select(func.count(func.distinct(TestAttempt.user_id))).where(TestAttempt.test_id == test_id)
    )
    unique_users = result.scalar() or 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
    result = await session.execute(
        select(func.avg(TestAttempt.score)).where(TestAttempt.test_id == test_id)
    )
    avg_score = result.scalar() or 0
    if avg_score:
        avg_score = round(avg_score, 1)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π
    result = await session.execute(
        select(
            func.sum(case((TestAttempt.is_passed == True, 1), else_=0)) * 100 / func.count(TestAttempt.attempt_id)
        ).where(TestAttempt.test_id == test_id)
    )
    success_rate = result.scalar() or 0
    if success_rate:
        success_rate = round(success_rate, 1)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    return {
        "total_attempts": total_attempts,
        "unique_users": unique_users,
        "avg_score": avg_score,
        "success_rate": success_rate
    }


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ (–æ–±—â–∏–π)
@router.callback_query(F.data == "create_test")
async def create_test_command(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞ (–≤—ã–±–æ—Ä —Å—Ç–∞—Ç—å–∏)"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
    result = await session.execute(
        select(Article).order_by(Article.title)
    )
    articles = result.scalars().all()
    
    if not articles:
        await callback.message.edit_text(
            "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç–∞—Ç—å–∏. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Å—Ç–∞—Ç—å—é –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –∑–Ω–∞–Ω–∏–π.",
            reply_markup=get_test_management_kb()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—å–∏
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    for article in articles:
        builder.add(InlineKeyboardButton(
            text=article.title,
            callback_data=f"create_test_for_article_{article.article_id}"
        ))
    
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="admin_tests"
    ))
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()
#################################################################################################

import sys
import os
from datetime import datetime

if __name__ == "__main__":
    sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, insert, update, and_, or_
from sqlalchemy.orm import joinedload

from bot.database.models import User, Article, Test, Question, Answer, TestAttempt, UserAnswer
from bot.keyboards.user_kb import get_main_menu_kb
from bot.utils.logger import logger

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —á–∞—Å—Ç—å)
router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserTestStates(StatesGroup):
    answering_question = State()
    test_completed = State()


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞
async def get_available_tests_kb(session: AsyncSession, user_id: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    result = await session.execute(
        select(Test, Article)
        .join(Article, Test.article_id == Article.article_id)
        .order_by(Article.title, Test.title)
    )
    tests_data = result.all()
    
    if not tests_data:
        # –ï—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        builder.add(InlineKeyboardButton(
            text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
            callback_data="back_to_main_menu"
        ))
        return builder.as_markup()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç–µ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –±–∞–ª–ª–æ–º
    completed_tests = {}
    for test, _ in tests_data:
        result = await session.execute(
            select(TestAttempt)
            .where(
                TestAttempt.user_id == user_id,
                TestAttempt.test_id == test.test_id
            )
            .order_by(TestAttempt.created_at.desc())
        )
        latest_attempt = result.scalar_one_or_none()
        
        if latest_attempt:
            completed_tests[test.test_id] = {
                'score': latest_attempt.score,
                'is_passed': latest_attempt.is_passed,
                'date': latest_attempt.created_at
            }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏
    for test, article in tests_data:
        test_info = completed_tests.get(test.test_id)
        
        if test_info and test_info['score'] == 10:
            # –ü—Ä–æ–π–¥–µ–Ω —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –±–∞–ª–ª–æ–º
            button_text = f"‚úÖ {test.title} ({article.title}) - 10/10"
        elif test_info:
            # –ü—Ä–æ–π–¥–µ–Ω, –Ω–æ –Ω–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –±–∞–ª–ª–æ–º
            button_text = f"‚ö†Ô∏è {test.title} ({article.title}) - {test_info['score']}/10"
        else:
            # –ù–µ –ø—Ä–æ–π–¥–µ–Ω
            button_text = f"üìù {test.title} ({article.title})"
        
        builder.add(InlineKeyboardButton(
            text=button_text,
            callback_data=f"start_user_test_{test.test_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.add(InlineKeyboardButton(
        text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        callback_data="back_to_main_menu"
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å
async def get_user_answers_kb(session: AsyncSession, question_id: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    result = await session.execute(
        select(Answer)
        .where(Answer.question_id == question_id)
        .order_by(Answer.position)
    )
    answers = result.scalars().all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    for answer in answers:
        builder.add(InlineKeyboardButton(
            text=answer.answer_text,
            callback_data=f"user_answer_{answer.answer_id}"
        ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
async def get_test_completion_kb(test_id: int, max_score: bool = False):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –Ω–∞–±—Ä–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤
    if not max_score:
        builder.add(InlineKeyboardButton(
            text="üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —â–µ —Ä–∞–∑",
            callback_data=f"restart_test_{test_id}"
        ))
        
        builder.add(InlineKeyboardButton(
            text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç",
            callback_data="complete_test"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—å–∏
    builder.add(InlineKeyboardButton(
        text="üìö –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç—Ç—é",
        callback_data=f"view_article_for_test_{test_id}"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤
    builder.add(InlineKeyboardButton(
        text="üìã –î–æ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç—ñ–≤",
        callback_data="back_to_tests_list"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.add(InlineKeyboardButton(
        text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        callback_data="back_to_main_menu"
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"
@router.message(F.text == "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
async def start_tests_command(message: Message, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤"""
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è:",
        reply_markup=await get_available_tests_kb(session, message.from_user.id)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞
@router.callback_query(F.data.startswith("start_user_test_"))
async def start_user_test(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ—Å—Ç–∞ –∏–∑ callback_data
    test_id = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    result = await session.execute(
        select(Test)
        .options(joinedload(Test.questions))
        .where(Test.test_id == test_id)
    )
    test = result.scalar_one_or_none()
    
    if not test:
        await callback.message.edit_text(
            "–¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ç–µ—Å—Ç:",
            reply_markup=await get_available_tests_kb(session, callback.from_user.id)
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
    result = await session.execute(
        select(Article).where(Article.article_id == test.article_id)
    )
    article = result.scalar_one_or_none()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –±–∞–ª–ª–æ–º
    user_id = callback.from_user.id
    result = await session.execute(
        select(TestAttempt)
        .where(
            TestAttempt.user_id == user_id,
            TestAttempt.test_id == test_id,
            TestAttempt.score == 10
        )
        .order_by(TestAttempt.created_at.desc())
    )
    max_score_attempt = result.scalar_one_or_none()
    
    if max_score_attempt:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –±–∞–ª–ª–æ–º
        await callback.message.edit_text(
            f"–í–∏ –≤–∂–µ –ø—Ä–æ–π—à–ª–∏ —Ç–µ—Å—Ç \"{test.title}\" –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–º –±–∞–ª–æ–º (10)!\n\n"
            f"–ë–∞–∂–∞—î—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç—Ç—é —á–∏ –≤–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —Ç–µ—Å—Ç?",
            reply_markup=await get_test_completion_kb(test_id, max_score=True)
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–ø—ã—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    result = await session.execute(
        select(TestAttempt)
        .where(
            TestAttempt.user_id == user_id,
            TestAttempt.test_id == test_id
        )
        .order_by(TestAttempt.created_at.desc())
    )
    previous_attempt = result.scalar_one_or_none()
    
    previous_score = previous_attempt.score if previous_attempt else 0
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞
    questions = test.questions if hasattr(test, 'questions') else []
    
    if not questions:
        await callback.message.edit_text(
            "–£ —Ü—å–æ–º—É —Ç–µ—Å—Ç—ñ –Ω–µ–º–∞—î –ø–∏—Ç–∞–Ω—å. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ç–µ—Å—Ç:",
            reply_markup=await get_available_tests_kb(session, callback.from_user.id)
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    new_attempt = TestAttempt(
        user_id=user_id,
        test_id=test_id,
        score=10,  # –ù–∞—á–∏–Ω–∞–µ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–ª–∞ –∏ –≤—ã—á–∏—Ç–∞–µ–º –∑–∞ –æ—à–∏–±–∫–∏
        is_passed=False  # –ü–æ–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞
    )
    session.add(new_attempt)
    await session.commit()
    await session.refresh(new_attempt)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –∏ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        test_id=test_id,
        attempt_id=new_attempt.attempt_id,
        questions_ids=[q.question_id for q in questions],
        current_question_index=0,
        errors_count=0,
        score=10,
        article_id=test.article_id
    )
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
    await callback.message.edit_text(
        f"üìù <b>–¢–µ—Å—Ç:</b> {test.title}\n"
        f"üìÑ <b>–°—Ç–∞—Ç—Ç—è:</b> {article.title if article else '–ù–µ–≤—ñ–¥–æ–º–∞'}\n"
        f"‚ùì <b>–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å:</b> {len(questions)}\n"
        f"üèÜ <b>–ü—Ä–æ—Ö—ñ–¥–Ω–∏–π –±–∞–ª:</b> {test.pass_threshold}%\n"
        f"üë§ <b>–í–∞—à –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> {previous_score}/10\n\n"
        f"<i>–ü–æ—á–∏–Ω–∞—î–º–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è. –ö–æ–∂–Ω–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑–Ω—ñ–º–∞—î 2 –±–∞–ª–∏. "
        f"–ü—ñ—Å–ª—è 5 –ø–æ–º–∏–ª–æ–∫ —Ç–µ—Å—Ç –±—É–¥–µ –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ.</i>",
        parse_mode="HTML"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    first_question = questions[0]
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await callback.message.answer(
        f"–ü–∏—Ç–∞–Ω–Ω—è 1 –∑ {len(questions)}:\n\n{first_question.question_text}",
        reply_markup=await get_user_answers_kb(session, first_question.question_id)
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    await state.set_state(UserTestStates.answering_question)
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
@router.callback_query(UserTestStates.answering_question, F.data.startswith("user_answer_"))
async def process_user_answer(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Ç–≤–µ—Ç–∞ –∏–∑ callback_data
    answer_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    test_id = data.get("test_id")
    attempt_id = data.get("attempt_id")
    current_question_index = data.get("current_question_index", 0)
    questions_ids = data.get("questions_ids", [])
    errors_count = data.get("errors_count", 0)
    score = data.get("score", 10)
    article_id = data.get("article_id")
    
    if not test_id or not attempt_id or not questions_ids:
        await callback.message.edit_text(
            "–ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ —Ç–µ—Å—Ç. –ü–æ—á–Ω—ñ—Ç—å –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É –∑–∞–Ω–æ–≤–æ.",
            reply_markup=await get_available_tests_kb(session, callback.from_user.id)
        )
        await state.clear()
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –≤–æ–ø—Ä–æ—Å–µ
    current_question_id = questions_ids[current_question_index]
    result = await session.execute(
        select(Question).where(Question.question_id == current_question_id)
    )
    question = result.scalar_one_or_none()
    
    if not question:
        await callback.message.edit_text(
            "–ü–æ–º–∏–ª–∫–∞: –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –¢–µ—Å—Ç –±—É–¥–µ –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ.",
            reply_markup=get_main_menu_kb()
        )
        await state.clear()
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
    result = await session.execute(
        select(Answer).where(Answer.answer_id == answer_id)
    )
    answer = result.scalar_one_or_none()
    
    if not answer:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_answer = UserAnswer(
        attempt_id=attempt_id,
        question_id=question.question_id,
        answer_id=answer.answer_id,
        is_correct=answer.is_correct,
        created_at=datetime.now()
    )
    session.add(user_answer)
    await session.commit()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if answer.is_correct:
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚úÖ –°—É–ø–µ—Ä! –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞."
        )
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        errors_count += 1
        score -= 2  # –í—ã—á–∏—Ç–∞–µ–º 2 –±–∞–ª–ª–∞ –∑–∞ –æ—à–∏–±–∫—É
        if score < 0:
            score = 0
            
        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚ùå –ó–¥–∞—î—Ç—å—Å—è, —â–æ—Å—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –≤ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ.."
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(errors_count=errors_count, score=score)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ (5)
        if errors_count >= 5:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤ –ë–î
            result = await session.execute(
                select(TestAttempt).where(TestAttempt.attempt_id == attempt_id)
            )
            attempt = result.scalar_one_or_none()
            
            if attempt:
                attempt.score = score
                attempt.is_passed = False
                await session.commit()
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫
            await callback.message.answer(
                "‚ö†Ô∏è –í–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ 5 –ø–æ–º–∏–ª–æ–∫. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ—á–∏—Ç–∞–π—Ç–µ –º–∞—Ç–µ—Ä—ñ–∞–ª —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=await get_test_completion_kb(test_id)
            )
            
            # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
            await state.clear()
            await callback.answer()
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
    current_question_index += 1
    
    if current_question_index < len(questions_ids):
        # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
        next_question_id = questions_ids[current_question_index]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –≤–æ–ø—Ä–æ—Å–µ
        result = await session.execute(
            select(Question).where(Question.question_id == next_question_id)
        )
        next_question = result.scalar_one_or_none()
        
        if not next_question:
            await callback.message.answer(
                "–ü–æ–º–∏–ª–∫–∞: –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –¢–µ—Å—Ç –±—É–¥–µ –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ.",
                reply_markup=get_main_menu_kb()
            )
            await state.clear()
            await callback.answer()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(current_question_index=current_question_index)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await callback.message.answer(
            f"–ü–∏—Ç–∞–Ω–Ω—è {current_question_index + 1} –∑ {len(questions_ids)}:\n\n{next_question.question_text}",
            reply_markup=await get_user_answers_kb(session, next_question.question_id)
        )
    else:
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
        result = await session.execute(
            select(Test).where(Test.test_id == test_id)
        )
        test = result.scalar_one_or_none()
        
        if not test:
            await callback.message.answer(
                "–ü–æ–º–∏–ª–∫–∞: —Ç–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=get_main_menu_kb()
            )
            await state.clear()
            await callback.answer()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤ –ë–î
        result = await session.execute(
            select(TestAttempt).where(TestAttempt.attempt_id == attempt_id)
        )
        attempt = result.scalar_one_or_none()
        
        if attempt:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–æ–π–¥–µ–Ω –ª–∏ —Ç–µ—Å—Ç
            pass_threshold = test.pass_threshold
            max_score = 10
            pass_score = max_score * (pass_threshold / 100)
            is_passed = score >= pass_score
            
            attempt.score = score
            attempt.is_passed = is_passed
            await session.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        if score == 10:
            result_message = f"üèÜ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ {score} –±–∞–ª—ñ–≤. –ß—É–¥–æ–≤–∞ —Ä–æ–±–æ—Ç–∞! –ú–∏ –ø–∏—à–∞—î–º–æ—Å—å —Ç–æ–±–æ—é!"
        elif score >= 2 and is_passed:
            result_message = f"üèÜ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ {score} –±–∞–ª—ñ–≤. –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ"
        else:
            result_message = f"‚ö†Ô∏è –í–∏ –Ω–µ –Ω–∞–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª—ñ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É. " \
                           f"–í–∏ –º–æ–∂–µ—Ç–µ —â–µ —Ä–∞–∑ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª —ñ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É. üîÑ"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
        await callback.message.answer(result_message)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        max_score_achieved = score == 10
        await callback.message.answer(
            "–©–æ –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–∞–ª—ñ?",
            reply_markup=await get_test_completion_kb(test_id, max_score=max_score_achieved)
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        await state.set_state(UserTestStates.test_completed)
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
@router.callback_query(F.data.startswith("restart_test_"))
async def restart_test(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞"""
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    await start_user_test(callback, state, session)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
@router.callback_query(F.data == "complete_test")
async def complete_test(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    await callback.message.edit_text(
        "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å!"
    )
    
    await callback.message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
        reply_markup=get_main_menu_kb()
    )
    
    await state.clear()
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤
@router.callback_query(F.data == "back_to_tests_list")
async def back_to_tests_list(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç–æ–≤"""
    await callback.message.edit_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è:",
        reply_markup=await get_available_tests_kb(session, callback.from_user.id)
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—å–∏ –ø–æ —Ç–µ—Å—Ç—É
@router.callback_query(F.data.startswith("view_article_for_test_"))
async def view_article_for_test(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—å–∏, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —Ç–µ—Å—Ç–æ–º"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ—Å—Ç–∞ –∏–∑ callback_data
    test_id = int(callback.data.split("_")[4])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    result = await session.execute(
        select(Test).where(Test.test_id == test_id)
    )
    test = result.scalar_one_or_none()
    
    if not test:
        await callback.message.edit_text(
            "–¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=await get_available_tests_kb(session, callback.from_user.id)
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
    result = await session.execute(
        select(Article).where(Article.article_id == test.article_id)
    )
    article = result.scalar_one_or_none()
    
    if not article:
        await callback.message.edit_text(
            "–°—Ç–∞—Ç—Ç—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=await get_available_tests_kb(session, callback.from_user.id)
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç",
        callback_data=f"start_user_test_{test_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üìã –î–æ —Å–ø–∏—Å–∫—É —Ç–µ—Å—Ç—ñ–≤",
        callback_data="back_to_tests_list"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        callback_data="back_to_main_menu"
    ))
    
    builder.adjust(1)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç—å—é
    await callback.message.edit_text(
        f"<b>{article.title}</b>\n\n{article.content}",
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç—å–∏
    result = await session.execute(
        select(ArticleImage)
        .where(ArticleImage.article_id == article.article_id)
        .order_by(ArticleImage.position)
    )
    images = result.scalars().all()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    for image in images:
        await callback.message.answer_photo(
            photo=image.file_id,
            caption=f"–Ü–ª—é—Å—Ç—Ä–∞—Ü—ñ—è –¥–æ —Å—Ç–∞—Ç—Ç—ñ '{article.title}'"
        )
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é."
    )
    
    await callback.message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
        reply_markup=get_main_menu_kb()
    )
    
    await state.clear()
    await callback.answer()