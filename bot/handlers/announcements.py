import sys
import os
from datetime import datetime

if __name__ == "__main__":
    sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, insert, update, and_, or_

from bot.database.models import User, Announcement, AnnouncementDelivery, City, Store
from bot.keyboards.user_kb import get_main_menu_kb
from bot.keyboards.admin_kb import get_admin_menu_kb
from bot.utils.logger import logger

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π
router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AnnouncementStates(StatesGroup):
    waiting_for_title = State()
    waiting_for_content = State()
    waiting_for_recipients = State()
    confirm_sending = State()


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è
async def get_recipients_kb(session: AsyncSession):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    recipients_types = [
        ("all", "üåé –í—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º"),
        ("by_city", "üèô –ó–∞ –º—ñ—Å—Ç–æ–º"),
        ("by_store", "üè™ –ó–∞ –º–∞–≥–∞–∑–∏–Ω–æ–º"),
        ("by_user", "üë§ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É")
    ]
    
    for type_id, type_name in recipients_types:
        builder.add(InlineKeyboardButton(
            text=type_name,
            callback_data=f"recipients_{type_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
    builder.add(InlineKeyboardButton(
        text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
        callback_data="cancel_announcement"
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
async def get_cities_kb_for_announcement(session: AsyncSession):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –ë–î
    result = await session.execute(select(City))
    cities = result.scalars().all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    for city in cities:
        builder.add(InlineKeyboardButton(
            text=city.name,
            callback_data=f"city_announcement_{city.city_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_recipients"
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
async def get_stores_kb_for_announcement(session: AsyncSession, city_id=None):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏–∑ –ë–î
    if city_id:
        result = await session.execute(
            select(Store).where(Store.city_id == city_id)
        )
    else:
        result = await session.execute(select(Store))
    
    stores = result.scalars().all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
    for store in stores:
        builder.add(InlineKeyboardButton(
            text=store.name,
            callback_data=f"store_announcement_{store.store_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–ª–∏ –≥–æ—Ä–æ–¥–æ–≤
    if city_id:
        builder.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞",
            callback_data="back_to_cities_announcement"
        ))
    else:
        builder.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_recipients"
        ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–û–±—ä—è–≤–ª–µ–Ω–∏—è" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.text == "üì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è")
async def announcements_command(message: Message, session: AsyncSession):
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    announcements_result = await session.execute(
        select(Announcement, AnnouncementDelivery)
        .join(
            AnnouncementDelivery,
            and_(
                Announcement.announcement_id == AnnouncementDelivery.announcement_id,
                AnnouncementDelivery.user_id == user_id
            )
        )
        .order_by(Announcement.created_at.desc())
    )
    
    announcements = announcements_result.all()
    
    if not announcements:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ–º–∞—î –æ–≥–æ–ª–æ—à–µ–Ω—å.",
            reply_markup=get_main_menu_kb()
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    await message.answer("–í–∞—à—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:")
    
    for announcement, delivery in announcements:
        # –û—Ç–º–µ—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ
        if not delivery.is_delivered:
            delivery.is_delivered = True
            delivery.delivered_at = datetime.now()
            await session.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º
        announcement_text = f"<b>{announcement.title}</b>\n\n{announcement.content}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
        await message.answer(
            announcement_text,
            parse_mode="HTML"
        )
    
    await message.answer(
        "–¶–µ –≤—Å—ñ –≤–∞—à—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.",
        reply_markup=get_main_menu_kb()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–†–∞—Å—Å—ã–ª–∫–∞" –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(F.text == "üì¢ –†–æ–∑—Å–∏–ª–∫–∞")
async def broadcast_command(message: Message, state: FSMContext, session: AsyncSession):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    user_result = await session.execute(
        select(User).where(User.user_id == user_id)
    )
    user = user_result.scalar_one_or_none()
    
    if not user or not user.is_admin:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.",
            reply_markup=get_main_menu_kb()
        )
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    await message.answer(
        "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.\n\n"
        "–í–≤–µ–¥—ñ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:"
    )
    
    await state.set_state(AnnouncementStates.waiting_for_title)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@router.message(AnnouncementStates.waiting_for_title)
async def process_announcement_title(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    title = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
    if len(title) > 200:
        await message.answer(
            "–ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ - 200 —Å–∏–º–≤–æ–ª—ñ–≤. "
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç—à–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(title=title)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    await message.answer(
        "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:"
    )
    
    await state.set_state(AnnouncementStates.waiting_for_content)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@router.message(AnnouncementStates.waiting_for_content)
async def process_announcement_content(message: Message, state: FSMContext, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    content = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
    if len(content) > 4000:
        await message.answer(
            "–ó–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ - 4000 —Å–∏–º–≤–æ–ª—ñ–≤. "
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–æ—Ç—à–∏–π —Ç–µ–∫—Å—Ç:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(content=content)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    await message.answer(
        "–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n\n"
        f"<b>{data['title']}</b>\n\n{content}",
        parse_mode="HTML"
    )
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    await message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:",
        reply_markup=await get_recipients_kb(session)
    )
    
    await state.set_state(AnnouncementStates.waiting_for_recipients)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@router.callback_query(AnnouncementStates.waiting_for_recipients, F.data.startswith("recipients_"))
async def select_recipients(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –∏–∑ callback_data
    recipients_type = callback.data.split("_")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(recipients_type=recipients_type)
    
    if recipients_type == "all":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        await callback.message.edit_text(
            "–í–∏ –≤–∏–±—Ä–∞–ª–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.\n\n"
            "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–∫—É:"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        from aiogram.types import InlineKeyboardButton
        
        builder = InlineKeyboardBuilder()
        
        builder.add(InlineKeyboardButton(
            text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏",
            callback_data="confirm_announcement"
        ))
        
        builder.add(InlineKeyboardButton(
            text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
            callback_data="cancel_announcement"
        ))
        
        builder.adjust(1)
        
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
        
        await state.set_state(AnnouncementStates.confirm_sending)
    
    elif recipients_type == "by_city":
        # –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        await callback.message.edit_text(
            "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:",
            reply_markup=await get_cities_kb_for_announcement(session)
        )
    
    elif recipients_type == "by_store":
        # –í—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        await callback.message.edit_text(
            "–û–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:",
            reply_markup=await get_stores_kb_for_announcement(session)
        )
    
    elif recipients_type == "by_user":
        # –í–≤–æ–¥ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        await callback.message.edit_text(
            "–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram (user_id) –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:"
        )
        
        # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        await callback.message.edit_reply_markup(reply_markup=None)
        
        await state.update_data(waiting_for_user_id=True)
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
@router.callback_query(F.data == "back_to_recipients")
async def back_to_recipients(callback: CallbackQuery, session: AsyncSession):
    await callback.message.edit_text(
        "–û–±–µ—Ä—ñ—Ç—å –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:",
        reply_markup=await get_recipients_kb(session)
    )
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@router.callback_query(AnnouncementStates.waiting_for_recipients, F.data.startswith("city_announcement_"))
async def select_city_for_announcement(callback: CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ—Ä–æ–¥–∞ –∏–∑ callback_data
    city_id = int(callback.data.split("_")[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥–æ—Ä–æ–¥–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(city_id=city_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏",
        callback_data="confirm_announcement"
    ))
    
    builder.add(InlineKeyboardButton(
        text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
        callback_data="cancel_announcement"
    ))
    
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–í–∏ –≤–∏–±—Ä–∞–ª–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –ø–µ–≤–Ω–æ–≥–æ –º—ñ—Å—Ç–∞.\n\n"
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–∫—É:",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(AnnouncementStates.confirm_sending)
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–æ–≤
@router.callback_query(F.data == "back_to_cities_announcement")
async def back_to_cities_announcement(callback: CallbackQuery, session: AsyncSession):
    await callback.message.edit_text(
        "–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:",
        reply_markup=await get_cities_kb_for_announcement(session)
    )
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@router.callback_query(AnnouncementStates.waiting_for_recipients, F.data.startswith("store_announcement_"))
async def select_store_for_announcement(callback: CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ callback_data
    store_id = int(callback.data.split("_")[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(store_id=store_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏",
        callback_data="confirm_announcement"
    ))
    
    builder.add(InlineKeyboardButton(
        text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
        callback_data="cancel_announcement"
    ))
    
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–í–∏ –≤–∏–±—Ä–∞–ª–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –ø–µ–≤–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É.\n\n"
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–∫—É:",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(AnnouncementStates.confirm_sending)
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(AnnouncementStates.waiting_for_recipients)
async def process_user_id(message: Message, state: FSMContext, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not data.get("waiting_for_user_id"):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ:"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID
    user_result = await session.execute(
        select(User).where(User.user_id == user_id)
    )
    user = user_result.scalar_one_or_none()
    
    if not user:
        await message.answer(
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—à–∏–π ID:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(target_user_id=user_id, waiting_for_user_id=False)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏",
        callback_data="confirm_announcement"
    ))
    
    builder.add(InlineKeyboardButton(
        text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
        callback_data="cancel_announcement"
    ))
    
    builder.adjust(1)
    
    await message.answer(
        f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user.first_name} {user.last_name}.\n\n"
        "–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–∫—É:",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(AnnouncementStates.confirm_sending)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@router.callback_query(AnnouncementStates.confirm_sending, F.data == "confirm_announcement")
async def confirm_send_announcement(callback: CallbackQuery, state: FSMContext, session: AsyncSession, bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    title = data.get("title")
    content = data.get("content")
    recipients_type = data.get("recipients_type")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –ë–î
    new_announcement = Announcement(
        title=title,
        content=content,
        created_by=callback.from_user.id
    )
    
    session.add(new_announcement)
    await session.commit()
    await session.refresh(new_announcement)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if recipients_type == "all":
        # –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        users_result = await session.execute(select(User))
        users = users_result.scalars().all()
    
    elif recipients_type == "by_city":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        city_id = data.get("city_id")
        users_result = await session.execute(
            select(User).where(User.city_id == city_id)
        )
        users = users_result.scalars().all()
    
    elif recipients_type == "by_store":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
        store_id = data.get("store_id")
        users_result = await session.execute(
            select(User).where(User.store_id == store_id)
        )
        users = users_result.scalars().all()
    
    elif recipients_type == "by_user":
        # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        target_user_id = data.get("target_user_id")
        users_result = await session.execute(
            select(User).where(User.user_id == target_user_id)
        )
        users = users_result.scalars().all()
    
    else:
        users = []
    
    if not users:
        await callback.message.edit_text(
            "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è.",
            reply_markup=get_admin_menu_kb()
        )
        await state.clear()
        await callback.answer()
        return
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø–∏—Å—å –æ –¥–æ—Å—Ç–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    delivery_count = 0
    
    for user in users:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ—Å—Ç–∞–≤–∫–µ
        delivery = AnnouncementDelivery(
            announcement_id=new_announcement.announcement_id,
            user_id=user.user_id,
            is_delivered=False
        )
        session.add(delivery)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            announcement_text = f"<b>{title}</b>\n\n{content}"
            
            await bot.send_message(
                chat_id=user.user_id,
                text=announcement_text,
                parse_mode="HTML"
            )
            
            # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–µ
            delivery.is_delivered = True
            delivery.delivered_at = datetime.now()
            
            delivery_count += 1
            
            # –ö–∞–∂–¥—ã–µ 30 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–µ–ª–∞–µ–º –∫–æ–º–º–∏—Ç –∏ –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É
            if delivery_count % 30 == 0:
                await session.commit()
                import asyncio
                await asyncio.sleep(0.5)  # –ü–∞—É–∑–∞ 0.5 —Å–µ–∫—É–Ω–¥—ã
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                await callback.message.edit_text(
                    f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è... –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {delivery_count}/{len(users)}"
                )
                
        except Exception as e:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await session.commit()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    from bot.database.models import AdminLog
    admin_log = AdminLog(
        admin_id=callback.from_user.id,
        action_type="SEND",
        entity_type="ANNOUNCEMENT",
        entity_id=new_announcement.announcement_id,
        details={
            "recipients_type": recipients_type,
            "users_count": len(users),
            "delivered_count": delivery_count
        }
    )
    session.add(admin_log)
    await session.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    await callback.message.edit_text(
        f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {delivery_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.",
        reply_markup=get_admin_menu_kb()
    )
    
    await state.clear()
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
@router.callback_query(F.data == "cancel_announcement")
async def cancel_announcement(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ñ–¥–ø—Ä–∞–≤–∫—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
    )
    
    await callback.message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_menu_kb()
    )
    
    await state.clear()
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    result = await session.execute(
        select(User).where(User.user_id == user_id)
    )
    user = result.scalar_one_or_none()
    
    if user and user.is_admin:
        await callback.message.edit_text(
            "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        )
        await callback.message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
            reply_markup=get_admin_menu_kb()
        )
    else:
        await callback.message.edit_text(
            "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        )
        await callback.message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:",
            reply_markup=get_main_menu_kb()
        )
    
    await state.clear()
    await callback.answer()


# –≠–∫—Å–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞
if __name__ == "__main__":
    print("–ú–æ–¥—É–ª—å announcements.py —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
    print("router –æ–ø—Ä–µ–¥–µ–ª–µ–Ω:", router is not None)