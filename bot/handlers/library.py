import sys
import os

if __name__ == "__main__":
    sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update, delete

from bot.database.models import Category, Article, ArticleImage, User
from bot.keyboards.user_kb import get_main_menu_kb
from bot.keyboards.admin_kb import get_admin_menu_kb
from bot.utils.logger import logger

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–Ω–∞–Ω–∏–π
router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ArticleStates(StatesGroup):
    waiting_for_category = State()
    waiting_for_article = State()
    waiting_for_title = State()
    waiting_for_content = State()
    waiting_for_images = State()
    confirm_publication = State()


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def get_categories_kb(session: AsyncSession, parent_id=None, level=1):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î
    if parent_id is None:
        result = await session.execute(
            select(Category).where(Category.level == level)
        )
    else:
        result = await session.execute(
            select(Category).where(
                Category.parent_id == parent_id,
                Category.level == level
            )
        )
    
    categories = result.scalars().all()
    
    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    if not categories and level == 1 and parent_id is None:
        default_categories = [
            {"name": "–ü—Ä–æ–¥–æ–≤–æ–ª—å—á—ñ —Ç–æ–≤–∞—Ä–∏", "parent_id": None, "level": 1},
            {"name": "–ù–µ–ø—Ä–æ–¥–æ–≤–æ–ª—å—á—ñ —Ç–æ–≤–∞—Ä–∏", "parent_id": None, "level": 1}
        ]
        
        for cat_data in default_categories:
            category = Category(**cat_data)
            session.add(category)
        
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–Ω–æ–≤–∞
        result = await session.execute(
            select(Category).where(Category.level == level)
        )
        categories = result.scalars().all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category in categories:
        builder.add(InlineKeyboardButton(
            text=category.name,
            callback_data=f"category_{category.category_id}_{level}"
        ))
    
    # –ï—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if level > 1 or parent_id is not None:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ—ë —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        if parent_id is not None:
            parent_result = await session.execute(
                select(Category).where(Category.category_id == parent_id)
            )
            parent = parent_result.scalar_one_or_none()
            
            back_level = level - 1
            back_parent_id = parent.parent_id if parent else None
            
            builder.add(InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data=f"back_to_categories_{back_level}_{back_parent_id or 0}"
            ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.add(InlineKeyboardButton(
        text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        callback_data="back_to_main_menu"
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—Ç–∞—Ç–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def get_articles_kb(session: AsyncSession, category_id):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    result = await session.execute(
        select(Article).where(Article.category_id == category_id)
    )
    articles = result.scalars().all()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category_result = await session.execute(
        select(Category).where(Category.category_id == category_id)
    )
    category = category_result.scalar_one_or_none()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç–∞—Ç—å–∏
    for article in articles:
        builder.add(InlineKeyboardButton(
            text=article.title,
            callback_data=f"article_{article.article_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    level = category.level if category else 1
    parent_id = category.parent_id if category else None
    
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –¥–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π",
        callback_data=f"back_to_categories_{level}_{parent_id or 0}"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.add(InlineKeyboardButton(
        text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        callback_data="back_to_main_menu"
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∑–Ω–∞–Ω–∏–π"
@router.message(F.text == "üìö –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –∑–Ω–∞–Ω—å")
async def library_command(message: Message, session: AsyncSession):
    await message.answer(
        "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –∑–Ω–∞–Ω—å! –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
        reply_markup=await get_categories_kb(session)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("category_"))
async def process_category_selection(callback: CallbackQuery, session: AsyncSession):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—Ä–æ–≤–µ–Ω—å –∏–∑ callback_data
    parts = callback.data.split("_")
    category_id = int(parts[1])
    level = int(parts[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    result = await session.execute(
        select(Category).where(Category.category_id == category_id)
    )
    category = result.scalar_one_or_none()
    
    if not category:
        await callback.message.edit_text(
            "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=await get_categories_kb(session)
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    subcategories_result = await session.execute(
        select(Category).where(Category.parent_id == category_id)
    )
    subcategories = subcategories_result.scalars().all()
    
    if subcategories:
        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
        next_level = level + 1
        await callback.message.edit_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category.name}\n\n–í–∏–±–µ—Ä—ñ—Ç—å –ø—ñ–¥–∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
            reply_markup=await get_categories_kb(session, category_id, next_level)
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—å–∏ –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await callback.message.edit_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category.name}\n\n–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—Ç—é:",
            reply_markup=await get_articles_kb(session, category_id)
        )
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
@router.callback_query(F.data.startswith("back_to_categories_"))
async def back_to_categories(callback: CallbackQuery, session: AsyncSession):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
    parts = callback.data.split("_")
    level = int(parts[3])
    parent_id = int(parts[4]) if parts[4] != "0" else None
    
    await callback.message.edit_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
        reply_markup=await get_categories_kb(session, parent_id, level)
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    result = await session.execute(
        select(User).where(User.user_id == user_id)
    )
    user = result.scalar_one_or_none()
    
    if user and user.is_admin:
        await callback.message.edit_text(
            "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        )
        await callback.message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
            reply_markup=get_admin_menu_kb()
        )
    else:
        await callback.message.edit_text(
            "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        )
        await callback.message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:",
            reply_markup=get_main_menu_kb()
        )
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—å–∏
@router.callback_query(F.data.startswith("article_"))
async def show_article(callback: CallbackQuery, session: AsyncSession):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å—Ç–∞—Ç—å–∏ –∏–∑ callback_data
    article_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—å–µ
    result = await session.execute(
        select(Article).where(Article.article_id == article_id)
    )
    article = result.scalar_one_or_none()
    
    if not article:
        await callback.message.edit_text(
            "–°—Ç–∞—Ç—Ç—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=await get_categories_kb(session)
        )
        await callback.answer()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—å–µ–π
    article_text = f"<b>{article.title}</b>\n\n{article.content}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
    await callback.message.edit_text(
        article_text,
        parse_mode="HTML"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç—å–∏
    images_result = await session.execute(
        select(ArticleImage).where(ArticleImage.article_id == article_id).order_by(ArticleImage.position)
    )
    images = images_result.scalars().all()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    for image in images:
        await callback.message.answer_photo(
            photo=image.file_id,
            caption=f"–Ü–ª—é—Å—Ç—Ä–∞—Ü—ñ—è –¥–æ —Å—Ç–∞—Ç—Ç—ñ '{article.title}'"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ—Å—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–∏
    from bot.database.models import Test
    test_result = await session.execute(
        select(Test).where(Test.article_id == article_id)
    )
    test = test_result.scalar_one_or_none()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å—Ç–∞—Ç—å–µ–π
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Å—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –µ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
    if test:
        builder.add(InlineKeyboardButton(
            text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç",
            callback_data=f"start_test_{test.test_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç–∞—Ç—å—è–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –¥–æ —Å—Ç–∞—Ç–µ–π",
        callback_data=f"back_to_articles_{article.category_id}"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.add(InlineKeyboardButton(
        text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        callback_data="back_to_main_menu"
    ))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.answer(
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=builder.as_markup()
    )
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å—Ç–∞—Ç—å—è–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("back_to_articles_"))
async def back_to_articles(callback: CallbackQuery, session: AsyncSession):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
    category_id = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    result = await session.execute(
        select(Category).where(Category.category_id == category_id)
    )
    category = result.scalar_one_or_none()
    
    if not category:
        await callback.message.edit_text(
            "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=await get_categories_kb(session)
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category.name}\n\n–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–∞—Ç—Ç—é:",
        reply_markup=await get_articles_kb(session, category_id)
    )
    await callback.answer()


# –≠–∫—Å–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞
if __name__ == "__main__":
    print("–ú–æ–¥—É–ª—å library.py —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
    print("router –æ–ø—Ä–µ–¥–µ–ª–µ–Ω:", router is not None)
    