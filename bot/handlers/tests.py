import sys
import os

if __name__ == "__main__":
    sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, insert, update

from bot.database.models import Test, Question, Answer, TestAttempt, UserAnswer, User, Article
from bot.keyboards.user_kb import get_main_menu_kb
from bot.utils.logger import logger

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤
router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class TestStates(StatesGroup):
    answering_questions = State()
    test_completed = State()


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞
async def get_tests_kb(session: AsyncSession):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –∏–∑ –ë–î
    result = await session.execute(
        select(Test, Article)
        .join(Article, Test.article_id == Article.article_id)
    )
    tests = result.all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    for test, article in tests:
        builder.add(InlineKeyboardButton(
            text=f"{test.title} ({article.title})",
            callback_data=f"select_test_{test.test_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.add(InlineKeyboardButton(
        text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        callback_data="back_to_main_menu"
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å
async def get_answers_kb(session: AsyncSession, question_id):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    result = await session.execute(
        select(Answer)
        .where(Answer.question_id == question_id)
        .order_by(Answer.position)
    )
    answers = result.scalars().all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
    for answer in answers:
        builder.add(InlineKeyboardButton(
            text=answer.answer_text,
            callback_data=f"answer_{answer.answer_id}"
        ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"
@router.message(F.text == "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
async def tests_command(message: Message, session: AsyncSession):
    await message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è:",
        reply_markup=await get_tests_kb(session)
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ—Å—Ç–∞
@router.callback_query(F.data.startswith("select_test_"))
async def select_test(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ—Å—Ç–∞ –∏–∑ callback_data
    test_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
    test_result = await session.execute(
        select(Test, Article)
        .join(Article, Test.article_id == Article.article_id)
        .where(Test.test_id == test_id)
    )
    test_data = test_result.first()
    
    if not test_data:
        await callback.message.edit_text(
            "–¢–µ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ç–µ—Å—Ç:",
            reply_markup=await get_tests_kb(session)
        )
        await callback.answer()
        return
    
    test, article = test_data
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –±–∞–ª–ª–æ–º
    user_id = callback.from_user.id
    attempts_result = await session.execute(
        select(TestAttempt)
        .where(
            TestAttempt.user_id == user_id,
            TestAttempt.test_id == test_id,
            TestAttempt.score == 10
        )
    )
    max_score_attempt = attempts_result.scalar_one_or_none()
    
    if max_score_attempt:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –ø–æ–ø—ã—Ç–∫–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –±–∞–ª–ª–æ–º
        await callback.message.edit_text(
            f"–í–∏ –≤–∂–µ –ø—Ä–æ–π—à–ª–∏ —Ç–µ—Å—Ç \"{test.title}\" –∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–º –±–∞–ª–æ–º (10)! "
            f"–í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ç–µ—Å—Ç:",
            reply_markup=await get_tests_kb(session)
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∞
    questions_result = await session.execute(
        select(Question)
        .where(Question.test_id == test_id)
        .order_by(Question.question_id)
    )
    questions = questions_result.scalars().all()
    
    if not questions:
        await callback.message.edit_text(
            "–£ —Ü—å–æ–º—É —Ç–µ—Å—Ç—ñ –Ω–µ–º–∞—î –ø–∏—Ç–∞–Ω—å. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π —Ç–µ—Å—Ç:",
            reply_markup=await get_tests_kb(session)
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–ø—ã—Ç–∫—É –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    new_attempt = TestAttempt(
        user_id=user_id,
        test_id=test_id,
        score=10,  # –ù–∞—á–∏–Ω–∞–µ–º —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–ª–∞ –∏ –≤—ã—á–∏—Ç–∞–µ–º –∑–∞ –æ—à–∏–±–∫–∏
        is_passed=False  # –ü–æ–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞
    )
    session.add(new_attempt)
    await session.commit()
    await session.refresh(new_attempt)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –∏ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        test_id=test_id,
        attempt_id=new_attempt.attempt_id,
        current_question_index=0,
        questions=[q.question_id for q in questions],
        errors_count=0,
        score=10
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    first_question = questions[0]
    
    await callback.message.edit_text(
        f"–¢–µ—Å—Ç: {test.title}\n\n–ü–∏—Ç–∞–Ω–Ω—è 1 –∑ {len(questions)}:\n{first_question.question_text}",
        reply_markup=await get_answers_kb(session, first_question.question_id)
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    await state.set_state(TestStates.answering_questions)
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
@router.callback_query(TestStates.answering_questions, F.data.startswith("answer_"))
async def process_answer(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Ç–≤–µ—Ç–∞ –∏–∑ callback_data
    answer_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    test_id = data.get("test_id")
    attempt_id = data.get("attempt_id")
    current_question_index = data.get("current_question_index")
    questions = data.get("questions")
    errors_count = data.get("errors_count", 0)
    score = data.get("score", 10)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
    answer_result = await session.execute(
        select(Answer, Question)
        .join(Question, Answer.question_id == Question.question_id)
        .where(Answer.answer_id == answer_id)
    )
    answer_data = answer_result.first()
    
    if not answer_data:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    answer, question = answer_data
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_answer = UserAnswer(
        attempt_id=attempt_id,
        question_id=question.question_id,
        answer_id=answer.answer_id,
        is_correct=answer.is_correct
    )
    session.add(user_answer)
    await session.commit()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if answer.is_correct:
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚úÖ –°—É–ø–µ—Ä! –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞."
        )
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        errors_count += 1
        score -= 2  # –í—ã—á–∏—Ç–∞–µ–º 2 –±–∞–ª–ª–∞ –∑–∞ –æ—à–∏–±–∫—É
        if score < 0:
            score = 0
            
        await callback.message.edit_text(
            f"{callback.message.text}\n\n‚ùå –ó–¥–∞—î—Ç—å—Å—è, —â–æ—Å—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –≤ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ.."
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(errors_count=errors_count, score=score)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ (5)
        if errors_count >= 5:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤ –ë–î
            await session.execute(
                update(TestAttempt)
                .where(TestAttempt.attempt_id == attempt_id)
                .values(score=score, is_passed=False)
            )
            await session.commit()
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫
            await callback.message.answer(
                "‚ö†Ô∏è –í–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ 5 –ø–æ–º–∏–ª–æ–∫. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ—á–∏—Ç–∞–π—Ç–µ –º–∞—Ç–µ—Ä—ñ–∞–ª —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑. "
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å \"üîÑ –ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ\", —â–æ–± —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É.",
                reply_markup=await get_restart_test_kb(test_id)
            )
            
            # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
            await state.clear()
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
    current_question_index += 1
    
    if current_question_index < len(questions):
        # –ï—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
        next_question_id = questions[current_question_index]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º –≤–æ–ø—Ä–æ—Å–µ
        question_result = await session.execute(
            select(Question).where(Question.question_id == next_question_id)
        )
        next_question = question_result.scalar_one_or_none()
        
        if not next_question:
            await callback.message.answer(
                "–ü–æ–º–∏–ª–∫–∞: –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ.",
                reply_markup=get_main_menu_kb()
            )
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(current_question_index=current_question_index)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await callback.message.answer(
            f"–ü–∏—Ç–∞–Ω–Ω—è {current_question_index + 1} –∑ {len(questions)}:\n{next_question.question_text}",
            reply_markup=await get_answers_kb(session, next_question.question_id)
        )
    else:
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤ –ë–î
        is_passed = score >= (10 * 0.8)  # 80% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–ª–∞
        
        await session.execute(
            update(TestAttempt)
            .where(TestAttempt.attempt_id == attempt_id)
            .values(score=score, is_passed=is_passed)
        )
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–µ
        test_result = await session.execute(
            select(Test).where(Test.test_id == test_id)
        )
        test = test_result.scalar_one_or_none()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        if score == 10:
            result_message = f"üèÜ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ {score} –±–∞–ª—ñ–≤. –ß—É–¥–æ–≤–∞ —Ä–æ–±–æ—Ç–∞! –ú–∏ –ø–∏—à–∞—î–º–æ—Å—å —Ç–æ–±–æ—é!"
        elif score >= 2 and is_passed:
            result_message = f"üèÜ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ {score} –±–∞–ª—ñ–≤. –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ"
        else:
            result_message = f"‚ö†Ô∏è –í–∏ –Ω–µ –Ω–∞–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª—ñ–≤ –¥–ª—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É. " \
                           f"–í–∏ –º–æ–∂–µ—Ç–µ —â–µ —Ä–∞–∑ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª —ñ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–Ω–æ–≤—É. üîÑ"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
        await callback.message.answer(result_message)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        if score < 10:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–±—Ä–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑
            await callback.message.answer(
                "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
                reply_markup=await get_test_completion_kb(test_id)
            )
        else:
            # –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
            await callback.message.answer(
                "–í—ñ—Ç–∞—î–º–æ –∑ —É—Å–ø—ñ—à–Ω–∏–º –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è–º —Ç–µ—Å—Ç—É!",
                reply_markup=get_main_menu_kb()
            )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
        await state.set_state(TestStates.test_completed)
    
    await callback.answer()


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
async def get_restart_test_kb(test_id):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="üîÑ –ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ",
        callback_data=f"restart_test_{test_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üìö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏",
        callback_data="back_to_library"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        callback_data="back_to_main_menu"
    ))
    
    builder.adjust(1)
    
    return builder.as_markup()


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
async def get_test_completion_kb(test_id):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    
    builder = InlineKeyboardBuilder()
    
    builder.add(InlineKeyboardButton(
        text="üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —â–µ —Ä–∞–∑",
        callback_data=f"restart_test_{test_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ç–µ—Å—Ç",
        callback_data=f"complete_test_{test_id}"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üìö –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏",
        callback_data="back_to_library"
    ))
    
    builder.add(InlineKeyboardButton(
        text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        callback_data="back_to_main_menu"
    ))
    
    builder.adjust(1)
    
    return builder.as_markup()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
@router.callback_query(F.data.startswith("restart_test_"))
async def restart_test(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ—Å—Ç–∞ –∏–∑ callback_data
    test_id = int(callback.data.split("_")[2])
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    await select_test(callback, state, session)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
@router.callback_query(F.data.startswith("complete_test_"))
async def complete_test(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î—è–∫—É—î–º–æ –∑–∞ —É—á–∞—Å—Ç—å!",
    )
    
    await callback.message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
        reply_markup=get_main_menu_kb()
    )
    
    await state.clear()
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ç–µ—Å—Ç–∞ –∏–∑ —Å—Ç–∞—Ç—å–∏
@router.callback_query(F.data.startswith("start_test_"))
async def start_test_from_article(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–µ—Å—Ç–∞ –∏–∑ callback_data
    test_id = int(callback.data.split("_")[2])
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ç–µ—Å—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
    callback.data = f"select_test_{test_id}"
    await select_test(callback, state, session)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∑–Ω–∞–Ω–∏–π
@router.callback_query(F.data == "back_to_library")
async def back_to_library(callback: CallbackQuery, session: AsyncSession):
    await callback.message.edit_text(
        "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –∑–Ω–∞–Ω—å! –í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:",
        reply_markup=await get_categories_kb(session)
    )
    await callback.answer()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def get_categories_kb(session: AsyncSession, parent_id=None, level=1):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    from aiogram.types import InlineKeyboardButton
    from bot.database.models import Category
    
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î
    if parent_id is None:
        result = await session.execute(
            select(Category).where(Category.level == level)
        )
    else:
        result = await session.execute(
            select(Category).where(
                Category.parent_id == parent_id,
                Category.level == level
            )
        )
    
    categories = result.scalars().all()
    
    # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    if not categories and level == 1 and parent_id is None:
        default_categories = [
            {"name": "–ü—Ä–æ–¥–æ–≤–æ–ª—å—á—ñ —Ç–æ–≤–∞—Ä–∏", "parent_id": None, "level": 1},
            {"name": "–ù–µ–ø—Ä–æ–¥–æ–≤–æ–ª—å—á—ñ —Ç–æ–≤–∞—Ä–∏", "parent_id": None, "level": 1}
        ]
        
        for cat_data in default_categories:
            category = Category(**cat_data)
            session.add(category)
        
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–Ω–æ–≤–∞
        result = await session.execute(
            select(Category).where(Category.level == level)
        )
        categories = result.scalars().all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category in categories:
        builder.add(InlineKeyboardButton(
            text=category.name,
            callback_data=f"category_{category.category_id}_{level}"
        ))
    
    # –ï—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —É—Ä–æ–≤–Ω–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if level > 1 or parent_id is not None:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ—ë —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        if parent_id is not None:
            parent_result = await session.execute(
                select(Category).where(Category.category_id == parent_id)
            )
            parent = parent_result.scalar_one_or_none()
            
            back_level = level - 1
            back_parent_id = parent.parent_id if parent else None
            
            builder.add(InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data=f"back_to_categories_{back_level}_{back_parent_id or 0}"
            ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.add(InlineKeyboardButton(
        text="üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        callback_data="back_to_main_menu"
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    result = await session.execute(
        select(User).where(User.user_id == user_id)
    )
    user = result.scalar_one_or_none()
    
    if user and user.is_admin:
        from bot.keyboards.admin_kb import get_admin_menu_kb
        await callback.message.edit_text(
            "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        )
        await callback.message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
            reply_markup=get_admin_menu_kb()
        )
    else:
        await callback.message.edit_text(
            "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        )
        await callback.message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:",
            reply_markup=get_main_menu_kb()
        )
    
    await state.clear()
    await callback.answer()


# –≠–∫—Å–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–∞
if __name__ == "__main__":
    print("–ú–æ–¥—É–ª—å tests.py —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
    print("router –æ–ø—Ä–µ–¥–µ–ª–µ–Ω:", router is not None)
    