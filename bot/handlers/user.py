import sys
import os

# –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command, CommandStart
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from bot.keyboards.user_kb import get_main_menu_kb, get_cities_kb, get_stores_kb
from bot.database.models import User, City, Store
from bot.database.operations_library import get_user_by_id, get_city_by_id, create_user
from bot.config import ADMIN_IDS
from bot.utils.logger import logger

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    waiting_for_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    waiting_for_city = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    waiting_for_store = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@router.message(CommandStart())
async def cmd_start_register(message: Message, state: FSMContext, session: AsyncSession):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = await get_user_by_id(session, user_id)
    
    if user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            f"–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {user.first_name}! –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
            reply_markup=get_main_menu_kb()
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await message.answer(
            "–í—ñ—Ç–∞—é! –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ."
            "\n\n–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏? –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:"
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏"
        await state.set_state(RegistrationStates.waiting_for_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è
    full_name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ—Å—Ç–æ–∏—Ç –º–∏–Ω–∏–º—É–º –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)
    name_parts = full_name.split()
    if len(name_parts) < 2:
        await message.answer(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(first_name=name_parts[0], last_name=' '.join(name_parts[1:]))
    
    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥
    await message.answer(
        "–î—è–∫—É—é! –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:",
        reply_markup=await get_cities_kb(session)
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    await state.set_state(RegistrationStates.waiting_for_city)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@router.callback_query(RegistrationStates.waiting_for_city, F.data.startswith("city_"))
async def process_city_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–∑ callback_data
    city_id = int(callback.data.split("_")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥–æ—Ä–æ–¥–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(city_id=city_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
    city = await get_city_by_id(session, city_id)
    
    if city:
        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω
        await callback.message.edit_text(
            f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ –º—ñ—Å—Ç–æ: {city.name}\n–¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à –º–∞–≥–∞–∑–∏–Ω:",
            reply_markup=await get_stores_kb(session, city_id)
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
        await state.set_state(RegistrationStates.waiting_for_store)
    else:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
        await callback.message.edit_text(
            "–ù–∞ –∂–∞–ª—å, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ —â–µ —Ä–∞–∑:",
            reply_markup=await get_cities_kb(session)
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
@router.callback_query(RegistrationStates.waiting_for_store, F.data == "back_to_cities")
async def back_to_city_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
    await callback.message.edit_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:",
        reply_markup=await get_cities_kb(session)
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    await state.set_state(RegistrationStates.waiting_for_city)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
@router.callback_query(RegistrationStates.waiting_for_store, F.data.startswith("store_"))
async def process_store_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ callback_data
    store_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await create_user(
        session=session,
        user_id=callback.from_user.id,
        first_name=user_data["first_name"],
        last_name=user_data["last_name"],
        city_id=user_data["city_id"],
        store_id=store_id,
        is_admin=callback.from_user.id in ADMIN_IDS  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ
    result = await session.execute(select(Store).where(Store.store_id == store_id))
    store = result.scalar_one_or_none()
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.edit_text(
        f"–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–Ü–º'—è: {user_data['first_name']} {user_data['last_name']}\n"
        f"–ú—ñ—Å—Ç–æ: {(await session.get(City, user_data['city_id'])).name}\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {store.name if store else '–ù–µ–≤—ñ–¥–æ–º–∏–π'}\n\n"
        f"–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –±–æ—Ç–∞."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await callback.message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
        reply_markup=get_main_menu_kb()
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await callback.answer()

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é (–∑–∞–≥–ª—É—à–∫–∏ –Ω–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ)
# @router.message(F.text == "üìö –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –∑–Ω–∞–Ω—å")
# async def library_command(message: Message):
#     await message.answer(
#         "–§—É–Ω–∫—Ü—ñ—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –∑–Ω–∞–Ω—å –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
#     )
@dp.message(F.text == "üìö –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –∑–Ω–∞–Ω—å")
async def simple_library_command(message: types.Message, session: AsyncSession = None):
    try:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∑–Ω–∞–Ω–∏–π! –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–∑–∂–µ
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –∑–Ω–∞–Ω–∏–π.")
        

@router.message(F.text == "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
async def tests_command(message: Message):
    await message.answer(
        "–§—É–Ω–∫—Ü—ñ—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    )

@router.message(F.text == "üèÜ –ú–æ—ó –±–∞–ª–∏")
async def my_points_command(message: Message):
    await message.answer(
        "–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –±–∞–ª—ñ–≤ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    )

@router.message(F.text == "üì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è")
async def announcements_command(message: Message):
    await message.answer(
        "–§—É–Ω–∫—Ü—ñ—è –æ–≥–æ–ª–æ—à–µ–Ω—å –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    )