import asyncio
import logging
import sys
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import KeyboardButton, InlineKeyboardButton
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from bot.config import BOT_TOKEN, ADMIN_IDS
from bot.database.database import Base, async_engine, AsyncSessionLocal
from bot.database.models import User, City, Store
from bot.utils.logger import logger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    waiting_for_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    waiting_for_city = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    waiting_for_store = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    edit_profile = State()         # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    edit_profile_name = State()    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏
    edit_profile_city = State()    # –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    edit_profile_store = State()   # –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class AdminStates(StatesGroup):
    waiting_for_city_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    waiting_for_store_name = State()
    waiting_for_city_for_store = State()
    waiting_for_confirm_delete = State()
    waiting_for_store_new_name = State()
    waiting_for_city_new_name = State()

# Middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class DbSessionMiddleware(BaseMiddleware):
    async def __call__(self, handler, event, data):
        async with AsyncSessionLocal() as session:
            data["session"] = session
            return await handler(event, data)

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    builder = ReplyKeyboardBuilder()
    
    builder.add(
        KeyboardButton(text="üìö –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –∑–Ω–∞–Ω—å"),
        KeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"),
        KeyboardButton(text="üèÜ –ú–æ—ó –±–∞–ª–∏"),
        KeyboardButton(text="üì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è"),
        KeyboardButton(text="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
    )
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ 2 —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ç–¥–µ–ª—å–Ω–æ
    builder.adjust(2, 2, 1)
    
    return builder.as_markup(resize_keyboard=True)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω-–º–µ–Ω—é
def get_admin_menu_kb():
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üìÑ –°—Ç–∞—Ç—å–∏", callback_data="admin_articles"),
        InlineKeyboardButton(text="‚úÖ –¢–µ—Å—Ç—ã", callback_data="admin_tests"),
        InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
        InlineKeyboardButton(text="üèô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞–º–∏ –∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏", callback_data="admin_locations"),
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_delete"),
        InlineKeyboardButton(text="üë§ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º", callback_data="user_mode")
    ]
    
    for button in buttons:
        builder.add(button)
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞–º–∏ –∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
def get_locations_management_kb():
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üèô –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="add_city"),
        InlineKeyboardButton(text="üèô –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥–∞", callback_data="edit_cities"),
        InlineKeyboardButton(text="üèô –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤", callback_data="list_cities"),
        InlineKeyboardButton(text="üè™ –î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω", callback_data="add_store"),
        InlineKeyboardButton(text="üè™ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã", callback_data="edit_stores"),
        InlineKeyboardButton(text="üè™ –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤", callback_data="list_stores"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="back_to_admin")
    ]
    
    for button in buttons:
        builder.add(button)
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥–æ—Ä–æ–¥–∞–º–∏
async def get_cities_kb(session: AsyncSession):
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –ë–î
    result = await session.execute(select(City))
    cities = result.scalars().all()
    
    # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≥–æ—Ä–æ–¥–∞
    if not cities:
        default_cities = ["–ö–∏—ó–≤", "–õ—å–≤—ñ–≤", "–û–¥–µ—Å–∞", "–•–∞—Ä–∫—ñ–≤", "–î–Ω—ñ–ø—Ä–æ"]
        for city_name in default_cities:
            city = City(name=city_name)
            session.add(city)
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å–Ω–æ–≤–∞
        result = await session.execute(select(City))
        cities = result.scalars().all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    for city in cities:
        builder.add(InlineKeyboardButton(
            text=city.name,
            callback_data=f"city_{city.city_id}"
        ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
async def get_stores_kb(session: AsyncSession, city_id: int):
    builder = InlineKeyboardBuilder()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        result = await session.execute(
            select(Store).where(Store.city_id == city_id)
        )
        stores = result.scalars().all()
        
        # –ï—Å–ª–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã
        if not stores:
            # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥
            city_result = await session.execute(select(City).where(City.city_id == city_id))
            city = city_result.scalar_one_or_none()
            
            if city:
                # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
                store_count = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
                for i in range(1, store_count + 1):
                    store = Store(name=f"–ú–∞–≥–∞–∑–∏–Ω {city.name} #{i}", city_id=city_id)
                    session.add(store)
                await session.commit()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å–Ω–æ–≤–∞
                result = await session.execute(select(Store).where(Store.city_id == city_id))
                stores = result.scalars().all()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
        for store in stores:
            builder.add(InlineKeyboardButton(
                text=store.name,
                callback_data=f"store_{store.store_id}"
            ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
        builder.add(InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞",
            callback_data="back_to_cities"
        ))
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤: {e}")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏
async def get_admin_cities_kb(session: AsyncSession):
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –ë–î
    result = await session.execute(select(City))
    cities = result.scalars().all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    for city in cities:
        builder.add(InlineKeyboardButton(
            text=city.name,
            callback_data=f"admin_city_{city.city_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_locations"
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
def get_edit_profile_kb():
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é", callback_data="edit_profile_name"),
        InlineKeyboardButton(text="üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="edit_profile_city"),
        InlineKeyboardButton(text="üè™ –ò–∑–º–µ–Ω–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω", callback_data="edit_profile_store"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")
    ]
    
    for button in buttons:
        builder.add(button)
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def get_confirmation_kb(action, entity_id):
    builder = InlineKeyboardBuilder()
    
    builder.add(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{action}_{entity_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")
    )
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def cmd_start(message: Message, state: FSMContext, session: AsyncSession):
    user_id = message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        result = await session.execute(select(User).where(User.user_id == user_id))
        user = result.scalar_one_or_none()
        
        if user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            if user.is_admin:
                await message.answer(
                    f"–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {user.first_name} {user.last_name}!\n"
                    f"–í–∏ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
                    reply_markup=get_admin_menu_kb()
                )
            else:
                await message.answer(
                    f"–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {user.first_name}! –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
                    reply_markup=get_main_menu_kb()
                )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await message.answer(
                "–í—ñ—Ç–∞—é! –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ."
                "\n\n–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏? –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:"
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏"
            await state.set_state(RegistrationStates.waiting_for_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cmd_start: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
async def cmd_help(message: Message):
    await message.answer(
        "ü§ñ <b>–î–æ–ø–æ–º–æ–≥–∞ –ø–æ –±–æ—Ç—É:</b>\n\n"
        "–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º:\n"
        "üìö –í–∏–≤—á–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏\n"
        "üìù –ü—Ä–æ—Ö–æ–¥–∏—Ç–∏ —Ç–µ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–Ω–∞–Ω—å\n"
        "üèÜ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å–≤—ñ–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç–∞ –±–∞–ª–∏\n"
        "üì¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ / –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É\n"
        "/admin - –î–æ—Å—Ç—É–ø –¥–æ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)",
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /admin
async def cmd_admin(message: Message, session: AsyncSession):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id in ADMIN_IDS:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = await session.execute(select(User).where(User.user_id == user_id))
        user = user.scalar_one_or_none()
        
        if user:
            user.is_admin = True
            await session.commit()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–º–µ–Ω—é
        await message.answer(
            "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=get_admin_menu_kb()
        )
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º
async def user_mode_command(callback: CallbackQuery, session: AsyncSession):
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    result = await session.execute(select(User).where(User.user_id == user_id))
    user = result.scalar_one_or_none()
    
    if user:
        await callback.message.edit_text(
            "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É."
        )
        await callback.message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:",
            reply_markup=get_main_menu_kb()
        )
    else:
        await callback.message.edit_text(
            "–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
async def process_name(message: Message, state: FSMContext, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è
    full_name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ—Å—Ç–æ–∏—Ç –º–∏–Ω–∏–º—É–º –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)
    name_parts = full_name.split()
    if len(name_parts) < 2:
        await message.answer(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º."
        )
        return
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(first_name=name_parts[0], last_name=' '.join(name_parts[1:]))
        
        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥
        await message.answer(
            "–î—è–∫—É—é! –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:",
            reply_markup=await get_cities_kb(session)
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
        await state.set_state(RegistrationStates.waiting_for_city)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_name: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
async def process_city_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–∑ callback_data
        city_id = int(callback.data.split("_")[1])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥–æ—Ä–æ–¥–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.update_data(city_id=city_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        current_state = await state.get_state()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
        result = await session.execute(select(City).where(City.city_id == city_id))
        city = result.scalar_one_or_none()
        
        if city:
            # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω
            await callback.message.edit_text(
                f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ –º—ñ—Å—Ç–æ: {city.name}\n–¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à –º–∞–≥–∞–∑–∏–Ω:",
                reply_markup=await get_stores_kb(session, city_id)
            )
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ
            if current_state == RegistrationStates.waiting_for_city:
                await state.set_state(RegistrationStates.waiting_for_store)
            elif current_state == RegistrationStates.edit_profile_city:
                await state.set_state(RegistrationStates.edit_profile_store)
        else:
            # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
            await callback.message.edit_text(
                "–ù–∞ –∂–∞–ª—å, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ —â–µ —Ä–∞–∑:",
                reply_markup=await get_cities_kb(session)
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_city_selection: {e}")
        await callback.message.edit_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
async def back_to_city_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
        await callback.message.edit_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:",
            reply_markup=await get_cities_kb(session)
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
        current_state = await state.get_state()
        if current_state == RegistrationStates.waiting_for_store:
            await state.set_state(RegistrationStates.waiting_for_city)
        elif current_state == RegistrationStates.edit_profile_store:
            await state.set_state(RegistrationStates.edit_profile_city)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_city_selection: {e}")
        await callback.message.edit_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
async def process_store_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ callback_data
        store_id = int(callback.data.split("_")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        current_state = await state.get_state()
        
        if current_state == RegistrationStates.waiting_for_store:
            # –≠—Ç–æ –Ω–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
            first_name = user_data.get('first_name')
            last_name = user_data.get('last_name')
            city_id = user_data.get('city_id')
            
            if not first_name or not last_name or not city_id:
                await callback.message.edit_text(
                    "–ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞. –ü–æ—á–Ω—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–Ω–æ–≤–æ –∑ –∫–æ–º–∞–Ω–¥–∏ /start"
                )
                await state.clear()
                await callback.answer()
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            is_admin = callback.from_user.id in ADMIN_IDS
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            new_user = User(
                user_id=callback.from_user.id,
                first_name=first_name,
                last_name=last_name,
                city_id=city_id,
                store_id=store_id,
                is_admin=is_admin
            )
            
            session.add(new_user)
            await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ –∏ –º–∞–≥–∞–∑–∏–Ω–µ
            city_result = await session.execute(select(City).where(City.city_id == city_id))
            city = city_result.scalar_one_or_none()
            
            store_result = await session.execute(select(Store).where(Store.store_id == store_id))
            store = store_result.scalar_one_or_none()
            
            city_name = city.name if city else "–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ"
            store_name = store.name if store else "–ù–µ–≤—ñ–¥–æ–º–∏–π –º–∞–≥–∞–∑–∏–Ω"
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await callback.message.edit_text(
                f"–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"–Ü–º'—è: {first_name} {last_name}\n"
                f"–ú—ñ—Å—Ç–æ: {city_name}\n"
                f"–ú–∞–≥–∞–∑–∏–Ω: {store_name}\n\n"
                f"–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –±–æ—Ç–∞."
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
            if is_admin:
                await callback.message.answer(
                    "–í–∏ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
                    reply_markup=get_admin_menu_kb()
                )
            else:
                await callback.message.answer(
                    "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
                    reply_markup=get_main_menu_kb()
                )
        
        elif current_state == RegistrationStates.edit_profile_store:
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            city_id = user_data.get('city_id')
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
            user_result = await session.execute(
                select(User).where(User.user_id == callback.from_user.id)
            )
            user = user_result.scalar_one_or_none()
            
            if not user:
                await callback.message.edit_text(
                    "–ü–æ–º–∏–ª–∫–∞: –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∑ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /start."
                )
                await state.clear()
                await callback.answer()
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –∏ –º–∞–≥–∞–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.city_id = city_id
            user.store_id = store_id
            await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ –∏ –º–∞–≥–∞–∑–∏–Ω–µ
            city_result = await session.execute(select(City).where(City.city_id == city_id))
            city = city_result.scalar_one_or_none()
            
            store_result = await session.execute(select(Store).where(Store.store_id == store_id))
            store = store_result.scalar_one_or_none()
            
            city_name = city.name if city else "–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ"
            store_name = store.name if store else "–ù–µ–≤—ñ–¥–æ–º–∏–π –º–∞–≥–∞–∑–∏–Ω"
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            await callback.message.edit_text(
                f"–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                f"–Ü–º'—è: {user.first_name} {user.last_name}\n"
                f"–ù–æ–≤–µ –º—ñ—Å—Ç–æ: {city_name}\n"
                f"–ù–æ–≤–∏–π –º–∞–≥–∞–∑–∏–Ω: {store_name}"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await callback.message.answer(
                "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
                reply_markup=get_main_menu_kb()
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_store_selection: {e}")
        await callback.message.edit_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def profile_command(message: Message, session: AsyncSession):
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    result = await session.execute(
        select(User, City, Store)
        .join(City, User.city_id == City.city_id)
        .join(Store, User.store_id == Store.store_id)
        .where(User.user_id == user_id)
    )
    user_data = result.first()
    
    if user_data:
        user, city, store = user_data
        await message.answer(
            f"–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\n\n"
            f"–Ü–º'—è: {user.first_name} {user.last_name}\n"
            f"–ú—ñ—Å—Ç–æ: {city.name}\n"
            f"–ú–∞–≥–∞–∑–∏–Ω: {store.name}\n\n"
            f"–©–æ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?",
            reply_markup=get_edit_profile_kb()
        )
    else:
        await message.answer(
            "–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def edit_profile_name_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:"
    )
    await state.set_state(RegistrationStates.edit_profile_name)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
async def process_edit_name(message: Message, state: FSMContext, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è
    full_name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ—Å—Ç–æ–∏—Ç –º–∏–Ω–∏–º—É–º –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)
    name_parts = full_name.split()
    if len(name_parts) < 2:
        await message.answer(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º."
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user_result = await session.execute(
            select(User).where(User.user_id == message.from_user.id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            await message.answer(
                "–ü–æ–º–∏–ª–∫–∞: –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∑ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /start."
            )
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.first_name = name_parts[0]
        user.last_name = ' '.join(name_parts[1:])
        await session.commit()
        
        await message.answer(
            f"–í–∞—à–µ —ñ–º'—è –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {full_name}.",
            reply_markup=get_main_menu_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_edit_name: {e}")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
async def edit_profile_city_command(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user_result = await session.execute(
            select(User).where(User.user_id == callback.from_user.id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            await callback.message.edit_text(
                "–ü–æ–º–∏–ª–∫–∞: –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∑ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /start."
            )
            await callback.answer()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            user_id=user.user_id,
            first_name=user.first_name,
            last_name=user.last_name,
            city_id=user.city_id,
            store_id=user.store_id,
            is_admin=user.is_admin
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
        await callback.message.edit_text(
            "–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –≥–æ—Ä–æ–¥:",
            reply_markup=await get_cities_kb(session)
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
        await state.set_state(RegistrationStates.edit_profile_city)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_profile_city_command: {e}")
        await callback.message.edit_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
async def edit_profile_store_command(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        user_result = await session.execute(
            select(User).where(User.user_id == callback.from_user.id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            await callback.message.edit_text(
                "–ü–æ–º–∏–ª–∫–∞: –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ—á–Ω—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–Ω–æ–≤–æ –∑ –∫–æ–º–∞–Ω–¥–∏ /start."
            )
            await callback.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ
        city_result = await session.execute(
            select(City).where(City.city_id == user.city_id)
        )
        city = city_result.scalar_one_or_none()
        
        if not city:
            await callback.message.edit_text(
                "–ü–æ–º–∏–ª–∫–∞: –º—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø–æ—á–∞—Ç–∫—É –æ–Ω–æ–≤—ñ—Ç—å –º—ñ—Å—Ç–æ."
            )
            await callback.answer()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥–æ—Ä–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(city_id=user.city_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        await callback.message.edit_text(
            f"–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –º—ñ—Å—Ç–∞ {city.name}:",
            reply_markup=await get_stores_kb(session, user.city_id)
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
        await state.set_state(RegistrationStates.edit_profile_store)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_profile_store_command: {e}")
        await callback.message.edit_text("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    result = await session.execute(
        select(User).where(User.user_id == user_id)
    )
    user = result.scalar_one_or_none()
    
    if user and user.is_admin:
        await callback.message.edit_text(
            "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        )
        await callback.message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
            reply_markup=get_admin_menu_kb()
        )
    else:
        await callback.message.edit_text(
            "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        )
        await callback.message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:",
            reply_markup=get_main_menu_kb()
        )
    
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–∫–∞—Ü–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_locations(callback: CallbackQuery):
    await callback.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞–º–∏ –∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_locations_management_kb()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é
async def back_to_admin_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=get_admin_menu_kb()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ª–æ–∫–∞—Ü–∏—è–º–∏
async def back_to_locations(callback: CallbackQuery):
    await callback.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞–º–∏ –∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_locations_management_kb()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
async def add_city_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:"
    )
    await state.set_state(AdminStates.waiting_for_city_name)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
async def process_city_name(message: Message, state: FSMContext, session: AsyncSession):
    city_name = message.text.strip()
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        city = City(name=city_name)
        session.add(city)
        await session.commit()
        
        await message.answer(
            f"–ì–æ—Ä–æ–¥ '{city_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.",
            reply_markup=get_locations_management_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: {e}")
        await message.answer(
            f"–ì–æ—Ä–æ–¥ '{city_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞.",
            reply_markup=get_locations_management_kb()
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
async def list_cities_command(callback: CallbackQuery, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
    result = await session.execute(select(City))
    cities = result.scalars().all()
    
    if not cities:
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç.",
            reply_markup=get_locations_management_kb()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≥–æ—Ä–æ–¥–æ–≤
    cities_list = "\n".join([f"üèô {city.name} (ID: {city.city_id})" for city in cities])
    
    await callback.message.edit_text(
        f"–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤:\n\n{cities_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_locations_management_kb()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
async def add_store_command(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:",
        reply_markup=await get_admin_cities_kb(session)
    )
    await state.set_state(AdminStates.waiting_for_city_for_store)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
async def edit_cities_command(callback: CallbackQuery, session: AsyncSession):
    result = await session.execute(select(City))
    cities = result.scalars().all()
    
    if not cities:
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç.",
            reply_markup=get_locations_management_kb()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    builder = InlineKeyboardBuilder()
    
    for city in cities:
        builder.add(InlineKeyboardButton(
            text=city.name,
            callback_data=f"edit_city_{city.city_id}"
        ))
    
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_locations"
    ))
    
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def edit_city_name_command(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ—Ä–æ–¥–∞ –∏–∑ callback_data
    city_id = int(callback.data.split("_")[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥–æ—Ä–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(city_id=city_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ—Ä–æ–¥–µ
    result = await session.execute(select(City).where(City.city_id == city_id))
    city = result.scalar_one_or_none()
    
    if not city:
        await callback.message.edit_text(
            "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_locations_management_kb()
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: {city.name}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:"
    )
    await state.set_state(AdminStates.waiting_for_city_new_name)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
async def process_edit_city_name(message: Message, state: FSMContext, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    new_name = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    city_id = data.get("city_id")
    
    if not city_id:
        await message.answer(
            "–û—à–∏–±–∫–∞: ID –≥–æ—Ä–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_locations_management_kb()
        )
        await state.clear()
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥
        result = await session.execute(select(City).where(City.city_id == city_id))
        city = result.scalar_one_or_none()
        
        if not city:
            await message.answer(
                "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_locations_management_kb()
            )
            await state.clear()
            return
        
        old_name = city.name
        city.name = new_name
        await session.commit()
        
        await message.answer(
            f"–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑–º–µ–Ω–µ–Ω–æ —Å '{old_name}' –Ω–∞ '{new_name}'.",
            reply_markup=get_locations_management_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: {e}")
        await message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: {e}",
            reply_markup=get_locations_management_kb()
        )
    
    await state.clear()
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
async def edit_stores_command(callback: CallbackQuery, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    result = await session.execute(select(City))
    cities = result.scalars().all()
    
    if not cities:
        await callback.message.edit_text(
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥–∞.",
            reply_markup=get_locations_management_kb()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    builder = InlineKeyboardBuilder()
    
    for city in cities:
        builder.add(InlineKeyboardButton(
            text=city.name,
            callback_data=f"edit_stores_city_{city.city_id}"
        ))
    
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_locations"
    ))
    
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –º–∞–≥–∞–∑–∏–Ω—ã –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
async def edit_stores_city(callback: CallbackQuery, session: AsyncSession):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ—Ä–æ–¥–∞ –∏–∑ callback_data
    city_id = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    city_result = await session.execute(select(City).where(City.city_id == city_id))
    city = city_result.scalar_one_or_none()
    
    if not city:
        await callback.message.edit_text(
            "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_locations_management_kb()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ
    stores_result = await session.execute(select(Store).where(Store.city_id == city_id))
    stores = stores_result.scalars().all()
    
    if not stores:
        await callback.message.edit_text(
            f"–í –≥–æ—Ä–æ–¥–µ '{city.name}' –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.",
            reply_markup=get_locations_management_kb()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    builder = InlineKeyboardBuilder()
    
    for store in stores:
        builder.add(InlineKeyboardButton(
            text=store.name,
            callback_data=f"edit_store_{store.store_id}"
        ))
    
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="edit_stores"
    ))
    
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≥–æ—Ä–æ–¥–µ '{city.name}':",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def edit_store_name_command(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ callback_data
    store_id = int(callback.data.split("_")[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–∞–≥–∞–∑–∏–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(store_id=store_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ
    result = await session.execute(select(Store).where(Store.store_id == store_id))
    store = result.scalar_one_or_none()
    
    if not store:
        await callback.message.edit_text(
            "–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_locations_management_kb()
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞: {store.name}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:"
    )
    await state.set_state(AdminStates.waiting_for_store_new_name)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
async def process_edit_store_name(message: Message, state: FSMContext, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    new_name = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    store_id = data.get("store_id")
    
    if not store_id:
        await message.answer(
            "–û—à–∏–±–∫–∞: ID –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_locations_management_kb()
        )
        await state.clear()
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω
        result = await session.execute(select(Store).where(Store.store_id == store_id))
        store = result.scalar_one_or_none()
        
        if not store:
            await message.answer(
                "–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_locations_management_kb()
            )
            await state.clear()
            return
        
        old_name = store.name
        store.name = new_name
        await session.commit()
        
        await message.answer(
            f"–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–æ —Å '{old_name}' –Ω–∞ '{new_name}'.",
            reply_markup=get_locations_management_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")
        await message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞: {e}",
            reply_markup=get_locations_management_kb()
        )
    
    await state.clear()










# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
async def process_city_for_store(callback: CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ—Ä–æ–¥–∞ –∏–∑ callback_data
    city_id = int(callback.data.split("_")[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥–æ—Ä–æ–¥–∞
    await state.update_data(city_id=city_id)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:"
    )
    await state.set_state(AdminStates.waiting_for_store_name)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
async def process_store_name(message: Message, state: FSMContext, session: AsyncSession):
    store_name = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    city_id = user_data.get('city_id')
    
    if not city_id:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_locations_management_kb()
        )
        await state.clear()
        return
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        store = Store(name=store_name, city_id=city_id)
        session.add(store)
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        city_result = await session.execute(select(City).where(City.city_id == city_id))
        city = city_result.scalar_one_or_none()
        city_name = city.name if city else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥"
        
        await message.answer(
            f"–ú–∞–≥–∞–∑–∏–Ω '{store_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥–æ—Ä–æ–¥ '{city_name}'.",
            reply_markup=get_locations_management_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞: {e}")
        await message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞: {e}",
            reply_markup=get_locations_management_kb()
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
async def list_stores_command(callback: CallbackQuery, session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    result = await session.execute(select(City))
    cities = result.scalars().all()
    
    if not cities:
        await callback.message.edit_text(
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥–∞.",
            reply_markup=get_locations_management_kb()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    builder = InlineKeyboardBuilder()
    
    for city in cities:
        builder.add(InlineKeyboardButton(
            text=city.name,
            callback_data=f"list_stores_city_{city.city_id}"
        ))
    
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_locations"
    ))
    
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
async def list_stores_by_city(callback: CallbackQuery, session: AsyncSession):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ—Ä–æ–¥–∞ –∏–∑ callback_data
    city_id = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    city_result = await session.execute(select(City).where(City.city_id == city_id))
    city = city_result.scalar_one_or_none()
    
    if not city:
        await callback.message.edit_text(
            "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_locations_management_kb()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ
    stores_result = await session.execute(select(Store).where(Store.city_id == city_id))
    stores = stores_result.scalars().all()
    
    if not stores:
        await callback.message.edit_text(
            f"–í –≥–æ—Ä–æ–¥–µ '{city.name}' –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.",
            reply_markup=get_locations_management_kb()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–∞–≥–∞–∑–∏–Ω–æ–≤
    stores_list = "\n".join([f"üè™ {store.name} (ID: {store.store_id})" for store in stores])
    
    await callback.message.edit_text(
        f"–ú–∞–≥–∞–∑–∏–Ω—ã –≤ –≥–æ—Ä–æ–¥–µ '{city.name}':\n\n{stores_list}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_locations_management_kb()
    )
    await callback.answer()

async def main():
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    try:
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        async with async_engine.begin() as conn:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            await conn.run_sync(Base.metadata.create_all)
        logger.info("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        raise

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
    dp.update.middleware(DbSessionMiddleware())
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.message.register(cmd_start, CommandStart())
    dp.message.register(cmd_admin, Command("admin"))
    dp.message.register(cmd_help, Command("help"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dp.message.register(process_name, RegistrationStates.waiting_for_name)
    dp.callback_query.register(process_city_selection, RegistrationStates.waiting_for_city, F.data.startswith("city_"))
    dp.callback_query.register(back_to_city_selection, RegistrationStates.waiting_for_store, F.data == "back_to_cities")
    dp.callback_query.register(process_store_selection, RegistrationStates.waiting_for_store, F.data.startswith("store_"))
    
    # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    dp.message.register(profile_command, F.text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")
    dp.callback_query.register(edit_profile_name_command, F.data == "edit_profile_name")
    dp.message.register(process_edit_name, RegistrationStates.edit_profile_name)
    dp.callback_query.register(edit_profile_city_command, F.data == "edit_profile_city")
    dp.callback_query.register(edit_profile_store_command, F.data == "edit_profile_store")
    dp.callback_query.register(process_city_selection, RegistrationStates.edit_profile_city, F.data.startswith("city_"))
    dp.callback_query.register(back_to_city_selection, RegistrationStates.edit_profile_store, F.data == "back_to_cities")
    dp.callback_query.register(process_store_selection, RegistrationStates.edit_profile_store, F.data.startswith("store_"))
    
    # –û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.callback_query.register(back_to_main_menu, F.data == "back_to_main_menu")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∞
    dp.callback_query.register(admin_locations, F.data == "admin_locations")
    dp.callback_query.register(back_to_admin_menu, F.data == "back_to_admin")
    dp.callback_query.register(back_to_locations, F.data == "back_to_locations")
    dp.callback_query.register(user_mode_command, F.data == "user_mode")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞–º–∏ –∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
    dp.callback_query.register(add_city_command, F.data == "add_city")
    dp.message.register(process_city_name, AdminStates.waiting_for_city_name)
    dp.callback_query.register(list_cities_command, F.data == "list_cities")
    dp.callback_query.register(add_store_command, F.data == "add_store")
    dp.callback_query.register(process_city_for_store, F.data.startswith("admin_city_"))
    dp.message.register(process_store_name, AdminStates.waiting_for_store_name)
    dp.callback_query.register(list_stores_command, F.data == "list_stores")
    dp.callback_query.register(list_stores_by_city, F.data.startswith("list_stores_city_"))
    
     # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤
    dp.callback_query.register(edit_cities_command, F.data == "edit_cities")
    dp.callback_query.register(edit_city_name_command, F.data.startswith("edit_city_"))
    dp.message.register(process_edit_city_name, AdminStates.waiting_for_city_new_name)
    dp.callback_query.register(edit_stores_command, F.data == "edit_stores")
    dp.callback_query.register(edit_stores_city, F.data.startswith("edit_stores_city_"))
    dp.callback_query.register(edit_store_name_command, F.data.startswith("edit_store_"))
    dp.message.register(process_edit_store_name, AdminStates.waiting_for_store_new_name)
    
       
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–ª–∏—Ç–∏–∫—É —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è Windows
        if sys.platform == 'win32':
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
        
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)