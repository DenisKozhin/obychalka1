import asyncio
import os
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.filters import Command, CommandStart
from bot.config import BOT_TOKEN, ADMIN_IDS

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
class RegistrationStates(StatesGroup):
    waiting_for_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    waiting_for_city = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    waiting_for_store = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
class AdminStates(StatesGroup):
    waiting_for_city_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    waiting_for_store_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
    waiting_for_city_for_store = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
    waiting_for_confirm_delete = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
DB_PATH = os.path.join(os.getcwd(), "bot.db")

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É cities (–≥–æ—Ä–æ–¥–∞), –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS cities (
        city_id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE NOT NULL
    )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É stores (–º–∞–≥–∞–∑–∏–Ω—ã), –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS stores (
        store_id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        city_id INTEGER,
        FOREIGN KEY (city_id) REFERENCES cities (city_id)
    )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏), –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        first_name TEXT NOT NULL,
        last_name TEXT NOT NULL,
        city_id INTEGER,
        store_id INTEGER,
        is_admin BOOLEAN DEFAULT 0,
        FOREIGN KEY (city_id) REFERENCES cities (city_id),
        FOREIGN KEY (store_id) REFERENCES stores (store_id)
    )
    ''')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –≥–æ—Ä–æ–¥–æ–≤
    cursor.execute("SELECT COUNT(*) FROM cities")
    count = cursor.fetchone()[0]
    
    # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if count == 0:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≥–æ—Ä–æ–¥–∞
        cities = ["–ö–∏—ó–≤", "–õ—å–≤—ñ–≤", "–û–¥–µ—Å–∞", "–•–∞—Ä–∫—ñ–≤", "–î–Ω—ñ–ø—Ä–æ"]
        for city_name in cities:
            cursor.execute("INSERT INTO cities (name) VALUES (?)", (city_name,))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
        test_stores = [
            ("–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∏–π'", 1),  # –ö–∏—ó–≤
            ("–ì—ñ–ø–µ—Ä–º–∞—Ä–∫–µ—Ç '–í–µ–ª–∏–∫–∞ –∫–∏—à–µ–Ω—è'", 1),  # –ö–∏—ó–≤
            ("–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç '–ì–∞–ª–∏—á–∏–Ω–∞'", 2),  # –õ—å–≤—ñ–≤
            ("–ú–∞—Ä–∫–µ—Ç '–ú–æ—Ä–µ'", 3)  # –û–¥–µ—Å–∞
        ]
        
        for store_name, city_id in test_stores:
            cursor.execute("INSERT INTO stores (name, city_id) VALUES (?, ?)", (store_name, city_id))
    
    conn.commit()
    conn.close()
    print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {DB_PATH}")

def get_cities():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute("SELECT city_id, name FROM cities ORDER BY name")
    cities = cursor.fetchall()
    
    conn.close()
    return cities

def get_stores(city_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute("SELECT store_id, name FROM stores WHERE city_id = ? ORDER BY name", (city_id,))
    stores = cursor.fetchall()
    
    conn.close()
    return stores

def save_user(user_id, first_name, last_name, city_id, store_id, is_admin=False):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    
    if user:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            "UPDATE users SET first_name = ?, last_name = ?, city_id = ?, store_id = ?, is_admin = ? WHERE user_id = ?",
            (first_name, last_name, city_id, store_id, is_admin, user_id)
        )
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            "INSERT INTO users (user_id, first_name, last_name, city_id, store_id, is_admin) VALUES (?, ?, ?, ?, ?, ?)",
            (user_id, first_name, last_name, city_id, store_id, is_admin)
        )
    
    conn.commit()
    conn.close()
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {first_name} {last_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

def get_user(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT u.first_name, u.last_name, c.name AS city_name, s.name AS store_name, u.is_admin 
    FROM users u
    LEFT JOIN cities c ON u.city_id = c.city_id
    LEFT JOIN stores s ON u.store_id = s.store_id
    WHERE u.user_id = ?
    ''', (user_id,))
    user = cursor.fetchone()
    
    conn.close()
    
    if user:
        return {
            "first_name": user[0], 
            "last_name": user[1],
            "city_name": user[2],
            "store_name": user[3],
            "is_admin": bool(user[4])
        }
    return None

def add_city(city_name):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    try:
        cursor.execute("INSERT INTO cities (name) VALUES (?)", (city_name,))
        conn.commit()
        conn.close()
        return True
    except sqlite3.IntegrityError:
        # –ì–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        conn.close()
        return False

def add_store(store_name, city_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute("INSERT INTO stores (name, city_id) VALUES (?, ?)", (store_name, city_id))
    conn.commit()
    conn.close()
    return True

def delete_city(city_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # –£–¥–∞–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω—ã –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ
    cursor.execute("DELETE FROM stores WHERE city_id = ?", (city_id,))
    
    # –£–¥–∞–ª—è–µ–º –≥–æ—Ä–æ–¥
    cursor.execute("DELETE FROM cities WHERE city_id = ?", (city_id,))
    
    conn.commit()
    conn.close()
    return True

def delete_store(store_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute("DELETE FROM stores WHERE store_id = ?", (store_id,))
    
    conn.commit()
    conn.close()
    return True

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_menu_kb():
    builder = ReplyKeyboardBuilder()
    
    builder.add(
        KeyboardButton(text="üìö –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –∑–Ω–∞–Ω—å"),
        KeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"),
        KeyboardButton(text="üèÜ –ú–æ—ó –±–∞–ª–∏"),
        KeyboardButton(text="üì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è")
    )
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ 2 —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏
    builder.adjust(2, 2)
    
    return builder.as_markup(resize_keyboard=True)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω-–º–µ–Ω—é
def get_admin_menu_kb():
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üìÑ –°—Ç–∞—Ç—å–∏", callback_data="admin_articles"),
        InlineKeyboardButton(text="‚úÖ –¢–µ—Å—Ç—ã", callback_data="admin_tests"),
        InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast"),
        InlineKeyboardButton(text="üèô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞–º–∏ –∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏", callback_data="admin_locations"),
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_delete"),
        InlineKeyboardButton(text="üë§ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º", callback_data="user_mode")
    ]
    
    for button in buttons:
        builder.add(button)
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞–º–∏ –∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
def get_locations_management_kb():
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üèô –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="add_city"),
        InlineKeyboardButton(text="üèô –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤", callback_data="list_cities"),
        InlineKeyboardButton(text="üè™ –î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω", callback_data="add_store"),
        InlineKeyboardButton(text="üè™ –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤", callback_data="list_stores"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="back_to_admin")
    ]
    
    for button in buttons:
        builder.add(button)
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
def get_cities_kb():
    cities = get_cities()
    builder = InlineKeyboardBuilder()
    
    for city_id, city_name in cities:
        builder.add(InlineKeyboardButton(
            text=city_name,
            callback_data=f"city_{city_id}"
        ))
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
def get_admin_cities_kb():
    cities = get_cities()
    builder = InlineKeyboardBuilder()
    
    for city_id, city_name in cities:
        builder.add(InlineKeyboardButton(
            text=city_name,
            callback_data=f"admin_city_{city_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_locations"
    ))
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
def get_cities_list_kb():
    cities = get_cities()
    builder = InlineKeyboardBuilder()
    
    for city_id, city_name in cities:
        builder.add(InlineKeyboardButton(
            text=f"{city_name} üóë",
            callback_data=f"delete_city_{city_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_locations"
    ))
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
def get_stores_list_kb():
    cities = get_cities()
    builder = InlineKeyboardBuilder()
    
    for city_id, city_name in cities:
        builder.add(InlineKeyboardButton(
            text=f"–ú–∞–≥–∞–∑–∏–Ω—ã –≤ {city_name}",
            callback_data=f"list_stores_{city_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_locations"
    ))
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≥–æ—Ä–æ–¥–µ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
def get_city_stores_list_kb(city_id):
    stores = get_stores(city_id)
    builder = InlineKeyboardBuilder()
    
    for store_id, store_name in stores:
        builder.add(InlineKeyboardButton(
            text=f"{store_name} üóë",
            callback_data=f"delete_store_{store_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤",
        callback_data="list_stores"
    ))
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
def get_stores_kb(city_id):
    stores = get_stores(city_id)
    builder = InlineKeyboardBuilder()
    
    for store_id, store_name in stores:
        builder.add(InlineKeyboardButton(
            text=store_name,
            callback_data=f"store_{store_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞",
        callback_data="back_to_cities"
    ))
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def get_confirmation_kb(action, entity_id):
    builder = InlineKeyboardBuilder()
    
    builder.add(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{action}_{entity_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")
    )
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = get_user(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin = user_id in ADMIN_IDS if user is None else user.get("is_admin", False)
    
    if user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        if is_admin:
            await message.answer(
                f"–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {user['first_name']} {user['last_name']}!\n"
                f"–í–∏ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
                reply_markup=get_admin_menu_kb()
            )
        else:
            await message.answer(
                f"–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {user['first_name']} {user['last_name']}!\n"
                f"–í–∞—à–µ –º—ñ—Å—Ç–æ: {user['city_name']}\n"
                f"–í–∞—à –º–∞–≥–∞–∑–∏–Ω: {user['store_name']}",
                reply_markup=get_main_menu_kb()
            )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await message.answer(
            "–í—ñ—Ç–∞—é! –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ."
            "\n\n–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏? –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:"
        )
        await state.set_state(RegistrationStates.waiting_for_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /admin
@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id in ADMIN_IDS:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = get_user(user_id)
        if user:
            save_user(
                user_id,
                user.get("first_name"),
                user.get("last_name"),
                None,  # city_id
                None,  # store_id
                True   # is_admin
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–º–µ–Ω—é
        await message.answer(
            "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
            reply_markup=get_admin_menu_kb()
        )
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º—É –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "back_to_admin")
async def back_to_admin_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=get_admin_menu_kb()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ª–æ–∫–∞—Ü–∏—è–º–∏
@dp.callback_query(lambda c: c.data == "back_to_locations")
async def back_to_locations_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞–º–∏ –∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_locations_management_kb()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞–º–∏ –∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
@dp.callback_query(lambda c: c.data == "admin_locations")
async def admin_locations(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞–º–∏ –∏ –º–∞–≥–∞–∑–∏–Ω–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_locations_management_kb()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
@dp.callback_query(lambda c: c.data == "add_city")
async def add_city_command(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:"
    )
    await state.set_state(AdminStates.waiting_for_city_name)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
@dp.message(AdminStates.waiting_for_city_name)
async def process_city_name(message: Message, state: FSMContext):
    city_name = message.text.strip()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = add_city(city_name)
    
    if success:
        await message.answer(
            f"–ì–æ—Ä–æ–¥ '{city_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.",
            reply_markup=get_locations_management_kb()
        )
    else:
        await message.answer(
            f"–ì–æ—Ä–æ–¥ '{city_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
            reply_markup=get_locations_management_kb()
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
@dp.callback_query(lambda c: c.data == "add_store")
async def add_store_command(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:",
        reply_markup=get_admin_cities_kb()
    )
    await state.set_state(AdminStates.waiting_for_city_for_store)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞
@dp.callback_query(lambda c: c.data and c.data.startswith("admin_city_"))
async def process_city_for_store(callback: types.CallbackQuery, state: FSMContext):
    city_id = int(callback.data.split("_")[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥–æ—Ä–æ–¥–∞
    await state.update_data(city_id=city_id)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞:"
    )
    await state.set_state(AdminStates.waiting_for_store_name)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
@dp.message(AdminStates.waiting_for_store_name)
async def process_store_name(message: Message, state: FSMContext):
    store_name = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    city_id = user_data.get('city_id')
    
    if not city_id:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_locations_management_kb()
        )
        await state.clear()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_store(store_name, city_id)
    
    cities = get_cities()
    city_name = next((name for id, name in cities if id == city_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥")
    
    await message.answer(
        f"–ú–∞–≥–∞–∑–∏–Ω '{store_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥–æ—Ä–æ–¥ '{city_name}'.",
        reply_markup=get_locations_management_kb()
    )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
@dp.callback_query(lambda c: c.data == "list_cities")
async def list_cities_command(callback: types.CallbackQuery):
    cities = get_cities()
    
    if not cities:
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç.",
            reply_markup=get_locations_management_kb()
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):",
        reply_markup=get_cities_list_kb()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤
@dp.callback_query(lambda c: c.data == "list_stores")
async def list_stores_command(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤:",
        reply_markup=get_stores_list_kb()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≥–æ—Ä–æ–¥–µ
@dp.callback_query(lambda c: c.data and c.data.startswith("list_stores_"))
async def list_city_stores_command(callback: types.CallbackQuery):
    city_id = int(callback.data.split("_")[2])
    
    stores = get_stores(city_id)
    cities = get_cities()
    city_name = next((name for id, name in cities if id == city_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥")
    
    if not stores:
        await callback.message.edit_text(
            f"–í –≥–æ—Ä–æ–¥–µ '{city_name}' –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–æ–≤.",
            reply_markup=get_stores_list_kb()
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        f"–ú–∞–≥–∞–∑–∏–Ω—ã –≤ –≥–æ—Ä–æ–¥–µ '{city_name}' (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):",
        reply_markup=get_city_stores_list_kb(city_id)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
@dp.callback_query(lambda c: c.data and c.data.startswith("delete_city_"))
async def delete_city_command(callback: types.CallbackQuery, state: FSMContext):
    city_id = int(callback.data.split("_")[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥–æ—Ä–æ–¥–∞ –∏ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(entity_id=city_id, entity_type="city")
    
    cities = get_cities()
    city_name = next((name for id, name in cities if id == city_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥")
    
    await callback.message.edit_text(
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥ '{city_name}' –∏ –≤—Å–µ –µ–≥–æ –º–∞–≥–∞–∑–∏–Ω—ã?",
        reply_markup=get_confirmation_kb("city", city_id)
    )
    await state.set_state(AdminStates.waiting_for_confirm_delete)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
@dp.callback_query(lambda c: c.data and c.data.startswith("delete_store_"))
async def delete_store_command(callback: types.CallbackQuery, state: FSMContext):
    store_id = int(callback.data.split("_")[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–∞–≥–∞–∑–∏–Ω–∞ –∏ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(entity_id=store_id, entity_type="store")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT name, city_id FROM stores WHERE store_id = ?", (store_id,))
    store_data = cursor.fetchone()
    conn.close()
    
    if not store_data:
        await callback.message.edit_text(
            "–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_stores_list_kb()
        )
        await callback.answer()
        return
    
    store_name, city_id = store_data
    
    await callback.message.edit_text(
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω '{store_name}'?",
        reply_markup=get_confirmation_kb("store", store_id)
    )
    await state.set_state(AdminStates.waiting_for_confirm_delete)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(lambda c: c.data and c.data.startswith("confirm_"))
async def confirm_delete(callback: types.CallbackQuery, state: FSMContext):
    action_parts = callback.data.split("_")
    entity_type = action_parts[1]
    entity_id = int(action_parts[2])
    
    if entity_type == "city":
        cities = get_cities()
        city_name = next((name for id, name in cities if id == entity_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥")
        
        delete_city(entity_id)
        
        await callback.message.edit_text(
            f"–ì–æ—Ä–æ–¥ '{city_name}' –∏ –≤—Å–µ –µ–≥–æ –º–∞–≥–∞–∑–∏–Ω—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.",
            reply_markup=get_locations_management_kb()
        )
    elif entity_type == "store":
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM stores WHERE store_id = ?", (entity_id,))
        store_data = cursor.fetchone()
        conn.close()
        
        store_name = store_data[0] if store_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω"
        
        delete_store(entity_id)
        
        await callback.message.edit_text(
            f"–ú–∞–≥–∞–∑–∏–Ω '{store_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_locations_management_kb()
        )
    
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(lambda c: c.data == "cancel_delete")
async def cancel_delete(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_locations_management_kb()
    )
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º
@dp.callback_query(lambda c: c.data == "user_mode")
async def user_mode_command(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    user = get_user(user_id)
    
    if user:
        await callback.message.edit_text(
            f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º.\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        await callback.message.answer(
            "–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=get_main_menu_kb()
        )
    else:
        await callback.message.edit_text(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@dp.message(RegistrationStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è
    full_name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ—Å—Ç–æ–∏—Ç –º–∏–Ω–∏–º—É–º –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)
    name_parts = full_name.split()
    if len(name_parts) < 2:
        await message.answer(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(first_name=name_parts[0], last_name=' '.join(name_parts[1:]))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏
    await message.answer(
        "–î—è–∫—É—é! –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:",
        reply_markup=get_cities_kb()
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    await state.set_state(RegistrationStates.waiting_for_city)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@dp.callback_query(lambda c: c.data and c.data.startswith("city_"))
async def process_city_selection_callback(callback: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ—Ä–æ–¥–∞ –∏–∑ callback_data
    city_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
    cities = get_cities()
    city_name = next((name for id, name in cities if id == city_id), "–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥–æ—Ä–æ–¥–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(city_id=city_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
    await callback.message.edit_text(
        f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ –º—ñ—Å—Ç–æ: {city_name}\n\n–¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à –º–∞–≥–∞–∑–∏–Ω:",
        reply_markup=get_stores_kb(city_id)
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    await state.set_state(RegistrationStates.waiting_for_store)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
@dp.callback_query(lambda c: c.data == "back_to_cities")
async def back_to_city_selection_callback(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏
    await callback.message.edit_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:",
        reply_markup=get_cities_kb()
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    await state.set_state(RegistrationStates.waiting_for_city)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
@dp.callback_query(lambda c: c.data and c.data.startswith("store_"))
async def process_store_selection_callback(callback: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ callback_data
    store_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    city_id = user_data.get('city_id')
    
    if not city_id:
        await callback.message.answer(
            "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –º—ñ—Å—Ç–æ. –ü–æ—á–Ω—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –∑–∞–Ω–æ–≤–æ –∑ –∫–æ–º–∞–Ω–¥–∏ /start"
        )
        await state.clear()
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∏ –º–∞–≥–∞–∑–∏–Ω–µ
    cities = get_cities()
    city_name = next((name for id, name in cities if id == city_id), "–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ")
    
    stores = get_stores(city_id)
    store_name = next((name for id, name in stores if id == store_id), "–ù–µ–≤—ñ–¥–æ–º–∏–π –º–∞–≥–∞–∑–∏–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    is_admin = callback.from_user.id in ADMIN_IDS
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    save_user(
        callback.from_user.id,
        user_data.get('first_name'),
        user_data.get('last_name'),
        city_id,
        store_id,
        is_admin  # –µ—Å–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–¥–º–∏–Ω–∞
    )
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await callback.message.edit_text(
        f"–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–Ü–º'—è: {user_data.get('first_name')} {user_data.get('last_name')}\n"
        f"–ú—ñ—Å—Ç–æ: {city_name}\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {store_name}\n\n"
        f"–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –±–æ—Ç–∞."
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    if is_admin:
        await callback.message.answer(
            "–í–∏ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
            reply_markup=get_admin_menu_kb()
        )
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
            reply_markup=get_main_menu_kb()
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(lambda m: m.text == "üìö –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –∑–Ω–∞–Ω—å")
async def library_command(message: Message):
    await message.answer(
        "–§—É–Ω–∫—Ü—ñ—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ –∑–Ω–∞–Ω—å –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    )

@dp.message(lambda m: m.text == "üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
async def tests_command(message: Message):
    await message.answer(
        "–§—É–Ω–∫—Ü—ñ—è –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—ñ–≤ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    )

@dp.message(lambda m: m.text == "üèÜ –ú–æ—ó –±–∞–ª–∏")
async def my_points_command(message: Message):
    await message.answer(
        "–§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≥–ª—è–¥—É –±–∞–ª—ñ–≤ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    )

@dp.message(lambda m: m.text == "üì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è")
async def announcements_command(message: Message):
    await message.answer(
        "–§—É–Ω–∫—Ü—ñ—è –æ–≥–æ–ª–æ—à–µ–Ω—å –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "ü§ñ <b>–î–æ–ø–æ–º–æ–≥–∞ –ø–æ –±–æ—Ç—É:</b>\n\n"
        "–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º:\n"
        "üìö –í–∏–≤—á–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–æ–≤–∞—Ä–∏\n"
        "üìù –ü—Ä–æ—Ö–æ–¥–∏—Ç–∏ —Ç–µ—Å—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–Ω–∞–Ω—å\n"
        "üèÜ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ —Å–≤—ñ–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç–∞ –±–∞–ª–∏\n"
        "üì¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ / –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É\n"
        "/admin - –î–æ—Å—Ç—É–ø –¥–æ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)",
        parse_mode="HTML"
    )

async def main():
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_db()
    
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)
# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –∫–ª–∞—Å—Å AdminStates
class AdminStates(StatesGroup):
    # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ...
    waiting_for_store_new_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
    waiting_for_city_new_name = State()   # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ –∫–ª–∞—Å—Å RegistrationStates
class RegistrationStates(StatesGroup):
    # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ...
    edit_profile = State()         # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    edit_profile_name = State()    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏
    edit_profile_city = State()    # –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    edit_profile_store = State()   # –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def update_store_name(store_id, new_name):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    cursor.execute("UPDATE stores SET name = ? WHERE store_id = ?", (new_name, store_id))
    
    conn.commit()
    conn.close()
    return True

def update_city_name(city_id, new_name):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞"""
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    try:
        cursor.execute("UPDATE cities SET name = ? WHERE city_id = ?", (new_name, city_id))
        conn.commit()
        conn.close()
        return True
    except sqlite3.IntegrityError:
        # –ì–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        conn.close()
        return False

# –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
def get_edit_profile_kb():
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é", callback_data="edit_profile_name"),
        InlineKeyboardButton(text="üèô –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="edit_profile_city"),
        InlineKeyboardButton(text="üè™ –ò–∑–º–µ–Ω–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω", callback_data="edit_profile_store"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")
    ]
    
    for button in buttons:
        builder.add(button)
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ
def get_edit_kb(entity_type, entity_id):
    builder = InlineKeyboardBuilder()
    
    builder.add(
        InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_{entity_type}_{entity_id}"),
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{entity_type}_{entity_id}"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_locations")
    )
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
def get_cities_list_edit_kb():
    cities = get_cities()
    builder = InlineKeyboardBuilder()
    
    for city_id, city_name in cities:
        builder.add(InlineKeyboardButton(
            text=city_name,
            callback_data=f"edit_city_options_{city_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_locations"
    ))
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
def get_stores_list_edit_kb(city_id):
    stores = get_stores(city_id)
    builder = InlineKeyboardBuilder()
    
    for store_id, store_name in stores:
        builder.add(InlineKeyboardButton(
            text=store_name,
            callback_data=f"edit_store_options_{store_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤",
        callback_data="list_stores"
    ))
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –î–æ–±–∞–≤—å—Ç–µ –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu_kb():
    builder = ReplyKeyboardBuilder()
    
    builder.add(
        KeyboardButton(text="üìö –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ –∑–Ω–∞–Ω—å"),
        KeyboardButton(text="üìù –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"),
        KeyboardButton(text="üèÜ –ú–æ—ó –±–∞–ª–∏"),
        KeyboardButton(text="üì¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è"),
        KeyboardButton(text="üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
    )
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ 2 —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ç–¥–µ–ª—å–Ω–æ
    builder.adjust(2, 2, 1)
    
    return builder.as_markup(resize_keyboard=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@dp.message(lambda m: m.text == "üë§ –ú—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å")
async def profile_command(message: Message):
    user_id = message.from_user.id
    user = get_user(user_id)
    
    if user:
        await message.answer(
            f"–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å:\n\n"
            f"–Ü–º'—è: {user['first_name']} {user['last_name']}\n"
            f"–ú—ñ—Å—Ç–æ: {user['city_name']}\n"
            f"–ú–∞–≥–∞–∑–∏–Ω: {user['store_name']}\n\n"
            f"–©–æ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?",
            reply_markup=get_edit_profile_kb()
        )
    else:
        await message.answer(
            "–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "back_to_main_menu")
async def back_to_main_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é."
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(lambda c: c.data == "edit_profile_name")
async def edit_profile_name_command(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:"
    )
    await state.set_state(RegistrationStates.edit_profile_name)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
@dp.message(RegistrationStates.edit_profile_name)
async def process_edit_name(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è
    full_name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ—Å—Ç–æ–∏—Ç –º–∏–Ω–∏–º—É–º –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)
    name_parts = full_name.split()
    if len(name_parts) < 2:
        await message.answer(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º."
        )
        return
    
    user_id = message.from_user.id
    user = get_user(user_id)
    
    if user:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_user(
            user_id,
            name_parts[0],
            ' '.join(name_parts[1:]),
            None,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥
            None,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –º–∞–≥–∞–∑–∏–Ω
            user.get("is_admin", False)
        )
        
        await message.answer(
            f"–í–∞—à–µ —ñ–º'—è –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {full_name}.",
            reply_markup=get_main_menu_kb()
        )
    else:
        await message.answer(
            "–ü–æ–º–∏–ª–∫–∞: –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∑ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /start."
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
@dp.callback_query(lambda c: c.data == "edit_profile_city")
async def edit_profile_city_command(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –≥–æ—Ä–æ–¥:",
        reply_markup=get_cities_kb()
    )
    await state.set_state(RegistrationStates.edit_profile_city)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞
@dp.callback_query(RegistrationStates.edit_profile_city, lambda c: c.data and c.data.startswith("city_"))
async def process_edit_city(callback: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≥–æ—Ä–æ–¥–∞ –∏–∑ callback_data
    city_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
    cities = get_cities()
    city_name = next((name for id, name in cities if id == city_id), "–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥–æ—Ä–æ–¥–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(city_id=city_id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
    await callback.message.edit_text(
        f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ –º—ñ—Å—Ç–æ: {city_name}\n\n–¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à –º–∞–≥–∞–∑–∏–Ω:",
        reply_markup=get_stores_kb(city_id)
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
    await state.set_state(RegistrationStates.edit_profile_store)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
@dp.callback_query(RegistrationStates.edit_profile_store, lambda c: c.data and c.data.startswith("store_"))
async def process_edit_store(callback: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ callback_data
    store_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    city_id = user_data.get('city_id')
    
    if not city_id:
        await callback.message.answer(
            "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –º—ñ—Å—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        )
        await state.clear()
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∏ –º–∞–≥–∞–∑–∏–Ω–µ
    cities = get_cities()
    city_name = next((name for id, name in cities if id == city_id), "–ù–µ–≤—ñ–¥–æ–º–µ –º—ñ—Å—Ç–æ")
    
    stores = get_stores(city_id)
    store_name = next((name for id, name in stores if id == store_id), "–ù–µ–≤—ñ–¥–æ–º–∏–π –º–∞–≥–∞–∑–∏–Ω")
    
    user_id = callback.from_user.id
    user = get_user(user_id)
    
    if user:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        save_user(
            user_id,
            user.get("first_name"),
            user.get("last_name"),
            city_id,
            store_id,
            user.get("is_admin", False)
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        await callback.message.edit_text(
            f"–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            f"–Ü–º'—è: {user.get('first_name')} {user.get('last_name')}\n"
            f"–ù–æ–≤–µ –º—ñ—Å—Ç–æ: {city_name}\n"
            f"–ù–æ–≤–∏–π –º–∞–≥–∞–∑–∏–Ω: {store_name}"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await callback.message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:",
            reply_markup=get_main_menu_kb()
        )
    else:
        await callback.message.edit_text(
            "–ü–æ–º–∏–ª–∫–∞: –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è –∑ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /start."
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏—è–º–∏
def get_locations_management_kb():
    builder = InlineKeyboardBuilder()
    
    buttons = [
        InlineKeyboardButton(text="üèô –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="add_city"),
        InlineKeyboardButton(text="üèô –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥–∞", callback_data="edit_cities"), # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        InlineKeyboardButton(text="üèô –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤", callback_data="list_cities"),
        InlineKeyboardButton(text="üè™ –î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω", callback_data="add_store"),
        InlineKeyboardButton(text="üè™ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã", callback_data="edit_stores"), # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        InlineKeyboardButton(text="üè™ –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤", callback_data="list_stores"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é", callback_data="back_to_admin")
    ]
    
    for button in buttons:
        builder.add(button)
    
    # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É
    builder.adjust(1)
    
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
@dp.callback_query(lambda c: c.data == "edit_cities")
async def edit_cities_command(callback: types.CallbackQuery):
    cities = get_cities()
    
    if not cities:
        await callback.message.edit_text(
            "–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø—É—Å—Ç.",
            reply_markup=get_locations_management_kb()
        )
        await callback.answer()
        return
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_cities_list_edit_kb()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
@dp.callback_query(lambda c: c.data == "edit_stores")
async def edit_stores_command(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥—è—Ç—Å—è –º–∞–≥–∞–∑–∏–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_stores_list_kb()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
@dp.callback_query(lambda c: c.data and c.data.startswith("edit_city_options_"))
async def edit_city_options_command(callback: types.CallbackQuery):
    city_id = int(callback.data.split("_")[3])
    
    cities = get_cities()
    city_name = next((name for id, name in cities if id == city_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥")
    
    await callback.message.edit_text(
        f"–ì–æ—Ä–æ–¥: {city_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_edit_kb("city", city_id)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
@dp.callback_query(lambda c: c.data and c.data.startswith("edit_store_options_"))
async def edit_store_options_command(callback: types.CallbackQuery):
    store_id = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT name, city_id FROM stores WHERE store_id = ?", (store_id,))
    store_data = cursor.fetchone()
    conn.close()
    
    if not store_data:
        await callback.message.edit_text(
            "–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_stores_list_kb()
        )
        await callback.answer()
        return
    
    store_name, city_id = store_data
    
    await callback.message.edit_text(
        f"–ú–∞–≥–∞–∑–∏–Ω: {store_name}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_edit_kb("store", store_id)
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
@dp.callback_query(lambda c: c.data and c.data.startswith("edit_city_"))
async def edit_city_name_command(callback: types.CallbackQuery, state: FSMContext):
    city_id = int(callback.data.split("_")[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥–æ—Ä–æ–¥–∞
    await state.update_data(city_id=city_id)
    
    cities = get_cities()
    city_name = next((name for id, name in cities if id == city_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥")
    
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city_name}':"
    )
    await state.set_state(AdminStates.waiting_for_city_new_name)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
@dp.message(AdminStates.waiting_for_city_new_name)
async def process_city_new_name(message: Message, state: FSMContext):
    new_city_name = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    city_id = user_data.get('city_id')
    
    if not city_id:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_locations_management_kb()
        )
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    success = update_city_name(city_id, new_city_name)
    
    if success:
        await message.answer(
            f"–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_city_name}'.",
            reply_markup=get_locations_management_kb()
        )
    else:
        await message.answer(
            f"–ì–æ—Ä–æ–¥ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{new_city_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
            reply_markup=get_locations_management_kb()
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
@dp.callback_query(lambda c: c.data and c.data.startswith("edit_store_"))
async def edit_store_name_command(callback: types.CallbackQuery, state: FSMContext):
    store_id = int(callback.data.split("_")[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–∞–≥–∞–∑–∏–Ω–∞
    await state.update_data(store_id=store_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM stores WHERE store_id = ?", (store_id,))
    store_data = cursor.fetchone()
    conn.close()
    
    store_name = store_data[0] if store_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω"
    
    await callback.message.edit_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ '{store_name}':"
    )
    await state.set_state(AdminStates.waiting_for_store_new_name)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
@dp.message(AdminStates.waiting_for_store_new_name)
async def process_store_new_name(message: Message, state: FSMContext):
    new_store_name = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    store_id = user_data.get('store_id')
    
    if not store_id:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –º–∞–≥–∞–∑–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_locations_management_kb()
        )
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞
    update_store_name(store_id, new_store_name)
    
    await message.answer(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_store_name}'.",
        reply_markup=get_locations_management_kb()
    )
    
    await state.clear()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")