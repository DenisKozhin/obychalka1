import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from bot.config import BOT_TOKEN, ADMIN_IDS
from bot.database.database import AsyncSessionLocal, Base, async_engine
from bot.database.models import User, City, Store
from sqlalchemy import select

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    waiting_for_name = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    waiting_for_city = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    waiting_for_store = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞

# Middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
class DbSessionMiddleware:
    async def __call__(self, handler, event, data):
        async with AsyncSessionLocal() as session:
            data["session"] = session
            return await handler(event, data)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥–æ—Ä–æ–¥–∞–º–∏
async def get_cities_kb(session):
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏–∑ –ë–î
    result = await session.execute(select(City))
    cities = result.scalars().all()
    
    # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≥–æ—Ä–æ–¥–∞
    if not cities:
        default_cities = ["–ö–∏—ó–≤", "–õ—å–≤—ñ–≤", "–û–¥–µ—Å–∞", "–•–∞—Ä–∫—ñ–≤", "–î–Ω—ñ–ø—Ä–æ"]
        for city_name in default_cities:
            city = City(name=city_name)
            session.add(city)
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ —Å–Ω–æ–≤–∞
        result = await session.execute(select(City))
        cities = result.scalars().all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    for city in cities:
        builder.add(InlineKeyboardButton(
            text=city.name,
            callback_data=f"city_{city.city_id}"
        ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏
async def get_stores_kb(session, city_id: int):
    builder = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    result = await session.execute(
        select(Store).where(Store.city_id == city_id)
    )
    stores = result.scalars().all()
    
    # –ï—Å–ª–∏ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã
    if not stores:
        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥
        city_result = await session.execute(select(City).where(City.city_id == city_id))
        city = city_result.scalar_one_or_none()
        
        if city:
            # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞
            store_count = 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
            for i in range(1, store_count + 1):
                store = Store(name=f"–ú–∞–≥–∞–∑–∏–Ω {city.name} #{i}", city_id=city_id)
                session.add(store)
            await session.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å–Ω–æ–≤–∞
            result = await session.execute(select(Store).where(Store.city_id == city_id))
            stores = result.scalars().all()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
    for store in stores:
        builder.add(InlineKeyboardButton(
            text=store.name,
            callback_data=f"store_{store.store_id}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
    builder.add(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –¥–æ –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞",
        callback_data=f"back_to_cities"
    ))
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ (–ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫—É)
    builder.adjust(1)
    
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def cmd_start(message: Message, state: FSMContext, session: AsyncSessionLocal):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    result = await session.execute(select(User).where(User.user_id == user_id))
    user = result.scalar_one_or_none()
    
    if user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await message.answer(
            f"–ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {user.first_name}! –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ:"
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await message.answer(
            "–í—ñ—Ç–∞—é! –î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ –¥–∞–Ω—ñ."
            "\n\n–Ø–∫ –≤–∞—Å –∑–≤–∞—Ç–∏? –í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:"
        )
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏"
        await state.set_state(RegistrationStates.waiting_for_name)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
async def process_name(message: Message, state: FSMContext, session: AsyncSessionLocal):
    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è
    full_name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ—Å—Ç–æ–∏—Ç –º–∏–Ω–∏–º—É–º –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ (–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è)
    name_parts = full_name.split()
    if len(name_parts) < 2:
        await message.answer(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø–æ–≤–Ω–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–æ–º."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(first_name=name_parts[0], last_name=' '.join(name_parts[1:]))
    
    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥
    await message.answer(
        "–î—è–∫—É—é! –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:",
        reply_markup=await get_cities_kb(session)
    )
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    await state.set_state(RegistrationStates.waiting_for_city)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
async def process_city_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSessionLocal):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏–∑ callback_data
    city_id = int(callback.data.split("_")[1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≥–æ—Ä–æ–¥–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(city_id=city_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ
    result = await session.execute(select(City).where(City.city_id == city_id))
    city = result.scalar_one_or_none()
    
    if city:
        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω
        await callback.message.edit_text(
            f"–í–∏ –≤–∏–±—Ä–∞–ª–∏ –º—ñ—Å—Ç–æ: {city.name}\n–¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à –º–∞–≥–∞–∑–∏–Ω:",
            reply_markup=await get_stores_kb(session, city_id)
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
        await state.set_state(RegistrationStates.waiting_for_store)
    else:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
        await callback.message.edit_text(
            "–ù–∞ –∂–∞–ª—å, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ —â–µ —Ä–∞–∑:",
            reply_markup=await get_cities_kb(session)
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
async def back_to_city_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSessionLocal):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
    await callback.message.edit_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:",
        reply_markup=await get_cities_kb(session)
    )
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    await state.set_state(RegistrationStates.waiting_for_city)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞
async def process_store_selection(callback: CallbackQuery, state: FSMContext, session: AsyncSessionLocal):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ callback_data
    store_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    new_user = User(
        user_id=callback.from_user.id,
        first_name=user_data["first_name"],
        last_name=user_data["last_name"],
        city_id=user_data["city_id"],
        store_id=store_id,
        is_admin=callback.from_user.id in ADMIN_IDS  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    session.add(new_user)
    await session.commit()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ
    result = await session.execute(select(Store).where(Store.store_id == store_id))
    store = result.scalar_one_or_none()
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.edit_text(
        f"–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–Ü–º'—è: {user_data['first_name']} {user_data['last_name']}\n"
        f"–ú—ñ—Å—Ç–æ: {(await session.get(City, user_data['city_id'])).name}\n"
        f"–ú–∞–≥–∞–∑–∏–Ω: {store.name if store else '–ù–µ–≤—ñ–¥–æ–º–∏–π'}\n\n"
        f"–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –≤—Å—ñ–º–∞ —Ñ—É–Ω–∫—Ü—ñ—è–º–∏ –±–æ—Ç–∞."
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    await callback.answer()

async def main():
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    try:
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        async with async_engine.begin() as conn:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            await conn.run_sync(Base.metadata.create_all)
        logger.info("–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        raise

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=BOT_TOKEN)
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware —Ç–æ–ª—å–∫–æ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    dp.update.middleware(DbSessionMiddleware())
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    dp.message.register(cmd_start, CommandStart())
    dp.message.register(process_name, RegistrationStates.waiting_for_name)
    dp.callback_query.register(process_city_selection, RegistrationStates.waiting_for_city, F.data.startswith("city_"))
    dp.callback_query.register(back_to_city_selection, RegistrationStates.waiting_for_store, F.data == "back_to_cities")
    dp.callback_query.register(process_store_selection, RegistrationStates.waiting_for_store, F.data.startswith("store_"))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)